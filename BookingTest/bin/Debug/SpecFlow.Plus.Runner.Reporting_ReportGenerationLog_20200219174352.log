2020-02-19T17:43:52.9277346-03:00;Thread#1;Info;Reading test run result from Json file "C:\Users\Maressa\AppData\Local\Temp\tmp9CAB.tmp".
2020-02-19T17:43:52.9317385-03:00;Thread#1;Info;Successfully read test run result from Json file "C:\Users\Maressa\AppData\Local\Temp\tmp9CAB.tmp"
2020-02-19T17:43:52.9317385-03:00;Thread#1;Info;Deserializing test run result
2020-02-19T17:43:53.5351390-03:00;Thread#1;Info;Successfully deserialized test run result
2020-02-19T17:43:53.5351390-03:00;Thread#1;Info;Loading test run result
2020-02-19T17:43:53.5541514-03:00;Thread#1;Info;Successfully loaded test run result
2020-02-19T17:43:53.5681608-03:00;Thread#1;Info;creating 1 report(s)
2020-02-19T17:43:53.5681608-03:00;Thread#1;Info;generate Report ReportTemplate.cshtml
2020-02-19T17:43:54.4349074-03:00;Thread#1;Error;RazorEngine.Templating.TemplateCompilationException: Errors while compiling a Template.
Please try the following to solve the situation:
  * If the problem is about missing/invalid references or multiple defines either try to load 
    the missing references manually (in the compiling appdomain!) or
    Specify your references manually by providing your own IReferenceResolver implementation.
    See https://antaris.github.io/RazorEngine/ReferenceResolver.html for details.
    Currently all references have to be available as files!
  * If you get 'class' does not contain a definition for 'member': 
        try another modelType (for example 'null' to make the model dynamic).
        NOTE: You CANNOT use typeof(dynamic) to make the model dynamic!
    Or try to use static instead of anonymous/dynamic types.
More details about the error:
 - warning: (0, 0) Presumindo que a referência de assembly 'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' corresponda a 'Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed', talvez seja necessário fornecer a política em tempo de execução
	 - error: (283, 13) Tipo 'TechTalk.SpecRun.Framework.Results.TestNodeResultTypeGroup' está definido em um assembly que não é usado como referência. Adicione uma referência ao assembly 'TechTalk.SpecRun.Common, Version=3.1.0.0, Culture=neutral, PublicKeyToken=d0fc5cc18b3b389b'.
	 - error: (283, 50) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - warning: (0, 0) Presumindo que a referência de assembly 'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' corresponda a 'Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed', talvez seja necessário fornecer a política em tempo de execução
	 - error: (396, 63) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (397, 60) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (398, 61) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (399, 61) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (664, 94) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (1446, 89) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
Temporary files of the compilation can be found in (please delete the folder): C:\Users\Maressa\AppData\Local\Temp\RazorEngine_s023as4v.wed
The template we tried to compile is: 
------------- START -----------
@inherits SpecFlow.Plus.Runner.Reporting.CustomTemplateBase<TestRunResult>

@using System
@using System.Collections.Generic
@using System.Linq
@using System.Globalization
@using TechTalk.SpecRun.Framework
@using TechTalk.SpecRun.Framework.Results
@using TechTalk.SpecRun.Framework.TestSuiteStructure
@helper GetReportBar(TestItemExecutionResult test)
    {
    <td class="testview-item" 
        data-sr-exectime="@GetSeconds(test.ExecutionTime)" data-sr-rescode="@((int)test.ResultType)" data-sr-order="@test.ExecutionOrder" data-sr-acttime="@GetSeconds(test.ActExecutionTime)">
        <a
            class="bar @("color" + test.ResultType)" 
            style="height: @GetBarSize(tr => tr.ExecutionTime.DurationMilliseconds, test, 0.0, 60)px;"
            title="@GetTestBarTooltip(test)"
            href="#@GetTestAnchor(test)">&nbsp;</a>
    </td>
}
@helper GetTimelineBar(DateTime startTime, DateTime endTime, double msecPerPixel, TestItemExecutionResult test)
    {
    int endPixel = Math.Max((int)Math.Round((endTime - Model.ExecutionTime.StartTime).TotalMilliseconds / msecPerPixel), currentPixel + 4);
    int size = endPixel - currentPixel;
    currentPixel = endPixel;
    <td>
        <a
            class="bar @(test == null ? "startupBar" : "color" + test.ResultType.ToString())" 
            style="width: @(size - 1)px;" 
            @if (test != null)
            {
                @:title="@GetTestBarTooltip(test)" 
                @:href="#@GetTestAnchor(test)"
            }
            else
            {
                @:title="test thread startup" 
            }
        >&nbsp;</a>
    </td>
}
@helper GetSummaryHeader(string titleHeader, bool showDuration = false)
{
    <tr>
        @if (titleHeader != null)
        {
            <th>@titleHeader</th>
        }
        <th colspan="2">Success rate</th>
        <th>Tests</th>
        <th>Succeeded</th>
        <th>Failed</th>
        <th>Pending</th>
        <th>Ignored</th>
        <th>Skipped</th>
        @if (showDuration)
        {
            <th>Duration</th>
        }
    </tr>
}
@helper GetSummaryRow(TestCollectionResultSummary summary, string title, string href, TimeSpan? executionDuration = null)
{
    <tr>
        @if (title != null)
        {
            <td><a href="#@href">@title</a></td>
        }
        @RenderTestExecutionSummaryRowTail(summary, executionDuration)
    </tr>
}

@helper RenderBar(TestNodeResultType testNodeResultType, int count, int total, Func<TestNodeResultType, string> titleFactory)
{
    <td>
        <a class="bar @("color" + testNodeResultType)" 
           style="width: @GetPixelBarWidth(total, count)px;" 
           title="@titleFactory(testNodeResultType)" 
           @if (testNodeResultType.GetGroup() == TestNodeResultTypeGroup.Failure)
           {
               @:href="#error_summary"
           }
        ></a>
    </td>
}

@helper RenderSummaryBars(IEnumerable<KeyValuePair<TestNodeResultType, int>> data, int total, Func<TestNodeResultType, string> titleFactory)
{
    <table class="timelineview" cellpadding="0" cellspacing="0">
        <tr>
            @foreach (var resultCount in data)
            {
                @RenderBar(resultCount.Key, resultCount.Value, total, titleFactory)
            }
        </tr>
    </table>
}

@helper RenderTotalSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
    @RenderSummaryRowTail(summary.Total, summary.ResultCounts, summary.TotalMessage, summary.GetText, executionDuration)
}

@helper RenderTestExecutionSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
    @RenderSummaryRowTail(summary.Total, summary.TestExecutionResultCounts, summary.TotalMessage, summary.GetText, executionDuration)
}

@helper RenderSummaryRowTail(int total, IDictionary<TestNodeResultType, int> resultCounts, string totalMessage, Func<TestNodeResultType, string> getText, TimeSpan? executionDuration = null)
{
    int succeeded = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Success)).Sum(rc => rc.Value);
    int failed = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Failure)).Sum(rc => rc.Value);
    int pending = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Pending)).Sum(rc => rc.Value);
    int ignored = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Ignored)).Sum(rc => rc.Value);
    int skipped = resultCounts[TestNodeResultType.Skipped];

    <td>
        @if (succeeded + failed + pending > 0)
        {
            @:@GetRoundedSuccessPercentage(succeeded, failed, pending)%
        }
        else
        {
            @:n/a
        }
    </td>
    <td>
        @RenderSummaryBars(GetOrderedBarChartData(resultCounts), total, getText)
    </td>
    <td>@totalMessage</td>
    <td>@succeeded</td>
    <td>@failed</td>
    <td>@pending</td>
    <td>@ignored</td>
    <td>@skipped</td>
    if (executionDuration != null)
    {
        <td>@executionDuration.Value</td>
    }
}

@helper TestItemLinks(TestItem testItem, int level)
{
    if (level == 0)
    {
        <a href="#@GetTestNodeAnchor(testItem, "t", 0)">@testItem.Type: @testItem.Title</a>
    }
    else
    {
        <a href="#@GetTestNodeAnchor(testItem, "t", 0)">@testItem.Title</a>
    }
    var tiResult = GetTestItemResult(testItem);
    if (tiResult != null)
    {
        foreach (var retry in tiResult.Executions.Skip(1))
        {
            <a href="#@GetTestNodeAnchor(testItem, "t", retry.TestItemExecutionIndex)">retry #@retry.TestItemExecutionIndex</a>
        }
    }
}
@helper TestNodeLinks(TestNode testNode, int level)
{
    if (testNode is TestItem)
    {
        @TestItemLinks((TestItem)testNode, level)
    }
    if (testNode is TestCollection)
    {
        <span>@testNode.Type: @testNode.Title</span>
        <ul class="subNodeLinks">
        @foreach (var subTestNode in ((TestCollection)testNode).SubNodes)
        {
            <li>
            @TestNodeLinks(subTestNode, level + 1)
            </li>
        }
        </ul>
    }
}
@functions
{
    double GetRoundedSuccessPercentage(int succeeded, int failed, int pending)
    {
        double absolute = succeeded + failed + pending;
        double percent = succeeded / absolute;
        double scaledRoundedPercent = Math.Round(percent * 100);
        return scaledRoundedPercent;
    }
    string GetFixtureTitle(TestNode fixtureNode)
    {
        return fixtureNode.IsDefaultTestTarget ? fixtureNode.Title : string.Format("{0} (target: {1})", fixtureNode.Title, fixtureNode.TestTarget);
    }

    TimeSpan CalculateDuration(TestNode testNode)
    {
        TimeSpan executionDuration = TimeSpan.Zero;

        var testNodeResults = Model.TestExecutionResults.Where(tr => tr.TestItemResult.TestNode == testNode);
        foreach (var testNodeResult in testNodeResults)
        {
            executionDuration += testNodeResult.ExecutionTime.Duration;
        }

        return executionDuration;
    }

    double GetPixelBarWidth(double total, double value)
    {
        return Math.Round((value * 200 / total) - 1);
    }

    IEnumerable<KeyValuePair<TestNodeResultType, int>> GetOrderedBarChartData(IEnumerable<KeyValuePair<TestNodeResultType, int>> source)
    {
        return source.Where(rc => rc.Value > 0).OrderByDescending(rc => rc.Key.GetGroup() == TestNodeResultTypeGroup.Success ? 1000 : (int)rc.Key);
    }
}

@section ProjectInformation
{
    <ul>
        <li>Project: @Model.Configuration.ProjectName</li>
        <li>Configuration: @Model.Configuration.Name</li>
        <li>Test Assemblies: @string.Join(", ", Model.Configuration.TestAssemblyPaths)</li>
        <li>Start Time: @Model.ExecutionTime.StartTime</li>
        <li>Duration: @Model.ExecutionTime.Duration</li>
        <li>Test Threads: @Model.TestThreads.Count</li>
        @if (Model.FrameworkError != null)
        {
            <li><div class="errorMessage">Execution framework error: @(Model.FrameworkError.ToString())</div></li>
        }
    </ul>
}

@section TestResultView
{
    <h2>Test Result View</h2>
    <div id="testview" class="viewbox">
        <div id="bar-control">
            <div id="bar-control-sort">
                <label>sort by:</label>
                <span class="option"><input type="radio" name="barSortOrder" value="exectime" />Time</span>
                <span class="option"><input type="radio" name="barSortOrder" value="acttime" />Act Time</span>
                <span class="option"><input type="radio" name="barSortOrder" value="order" />Execution</span>
                <span class="option"><input type="radio" name="barSortOrder" value="rescode" checked="checked" />Result</span>
                <span class="option"><input type="checkbox" name="barSortDesc" id="barSortDesc" checked="checked" />desc</span>
            </div>
            <div id="bar-control-heights">
                <label>heights:</label>
                <span class="option"><input type="radio" checked="checked" name="barHeight" value="exectime" />Time</span>
                <span class="option"><input type="radio" name="barHeight" value="acttime" />Act Time</span>
            </div>
        </div>
        <table class="vertical-scale" cellpadding="0" cellspacing="0">
            <tr class="scale-max">
                <td class="left-padding scale-max-label">&nbsp;</td>
                <td colspan="@Model.TestExecutionResults.Count()">&nbsp;</td>
                <td class="right-padding">&nbsp;</td>
            </tr>
            <tr class="scale-mid">
                <td class="left-padding scale-mid-label">&nbsp;</td>
                <td colspan="@Model.TestExecutionResults.Count()">&nbsp;</td>
                <td class="right-padding">&nbsp;</td>
            </tr>
            <tr class="scale-min">
                <td class="left-padding scale-min-label">&nbsp;</td>
                <td colspan="@Model.TestExecutionResults.Count()">&nbsp;</td>
                <td class="right-padding">&nbsp;</td>
            </tr>
        </table>
        <div class="scrollable">
            <table class="testview-items" cellpadding="0" cellspacing="0">
                <tr class="testview-items-row">
                    <td class="left-padding">&nbsp;</td>
                    @foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ResultType))
                    {
                        @GetReportBar(test);
                    }
                    <td class="right-padding">&nbsp;</td>
                </tr>
                <tr class="horizontal-scale">
                    <td class="left-padding">&nbsp;</td>
                    <td colspan="10">&nbsp;</td>
                    @for (int test10Index = 1; test10Index < Model.TestExecutionResults.Count() / 10; test10Index++)
                    {
                        <td class="scale-10-label" colspan="10">@(test10Index * 10)</td>
                    }
                </tr>
            </table>
        </div>
    </div>
}
@section FeatureSummary
{
    <h2>Feature Summary</h2>
    <table class="testEvents">
        @GetSummaryHeader("Feature", true)

        @foreach (var fixtureNode in GetTextFixtures())
        {
            var fixtureSummary = GetSummary(fixtureNode);
            string fixtureTitle = GetFixtureTitle(fixtureNode);
            string testNodeAnchor = GetTestNodeAnchor(fixtureNode, "f");

            var executionDuration = fixtureNode.SubNodes.Aggregate(TimeSpan.Zero, (acc, testNode) => acc + CalculateDuration(testNode));

            <tr>
                <td><a href="#@testNodeAnchor">@fixtureTitle</a></td>
                @RenderTestExecutionSummaryRowTail(fixtureSummary, executionDuration)
            </tr>
        }
    </table>
}
<!DOCTYPE html>
<html>
	<head>
        <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
		<title>@Model.Configuration.ProjectName Test Execution Report</title>
        <script type="text/javascript" src="http://code.jquery.com/jquery-1.6.2.min.js"></script>
        <script type="text/javascript">
            /**
            * jQuery.fn.sortElements
            * --------------
            * #author James Padolsey (http://james.padolsey.com)
            * #version 0.11
            * #updated 18-MAR-2010
            * #url https://raw.github.com/jamespadolsey/jQuery-Plugins/master/sortElements/jquery.sortElements.js
            * --------------
            * #param Function comparator:
            *   Exactly the same behaviour as [1,2,3].sort(comparator)
            *   
            * #param Function getSortable
            *   A function that should return the element that is
            *   to be sorted. The comparator will run on the
            *   current collection, but you may want the actual
            *   resulting sort to occur on a parent or another
            *   associated element.
            *   
            *   E.g. $('td').sortElements(comparator, function(){
            *      return this.parentNode; 
            *   })
            *   
            *   The <td>'s parent (<tr>) will be sorted instead
            *   of the <td> itself.
            */
            jQuery.fn.sortElements = (function () {

                var sort = [].sort;

                return function (comparator, getSortable) {

                    getSortable = getSortable || function () { return this; };

                    var placements = this.map(function () {

                        var sortElement = getSortable.call(this),
                parentNode = sortElement.parentNode,

                        // Since the element itself will change position, we have
                        // to have some way of storing it's original position in
                        // the DOM. The easiest way is to have a 'flag' node:
                nextSibling = parentNode.insertBefore(
                    document.createTextNode(''),
                    sortElement.nextSibling
                );

                        return function () {

                            if (parentNode === this) {
                                throw new Error(
                        "You can't sort elements if any one is a descendant of another."
                    );
                            }

                            // Insert before flag:
                            parentNode.insertBefore(this, nextSibling);
                            // Remove flag:
                            parentNode.removeChild(nextSibling);

                        };

                    });

                    return sort.call(this, comparator).each(function (i) {
                        placements[i].call(getSortable.call(this));
                    });

                };

            })();
        </script>
        <script type="text/javascript">
            jQuery.fn.setBarSizes = (function () {
                return function (metricName, maxBarSize, min) {
                    var max = Math.max.apply(Math, $.makeArray($(this).map(function () { return Number($(this).attr('data-sr-' + metricName)); })));
                    var scale = 1.0;
                    while (max > 0.0 && max <= 10.0) {
                        scale = scale * 10.0;
                        max = max * 10.0;
                    }
                    max = (Math.ceil(max / 2) * 2) / scale;

                    this.each(function () {
                        var barAnchor = $(this).find('a');
                        var actual = $(this).attr('data-sr-' + metricName);
                        var newHeight = Math.max(Math.round(maxBarSize * (actual - min) / (max - min)), 2);
                        barAnchor.css({ height: newHeight });
                    });

                    var unit = "";
                    if (metricName.substr(metricName.length - 4, 4) === "time")
                        unit = "s";

                    $('#testview .scale-min-label').each(function () {
                        $(this).text(min.toString() + unit);
                    });
                    $('#testview .scale-max-label').each(function () {
                        $(this).text(max.toString() + unit);
                    });
                    var mid = max / 2;
                    $('#testview .scale-mid-label').each(function () {
                        $(this).text(mid.toString() + unit);
                    });
                };
            })();

            function getComparer(metricName, isDesc) {
                return function (a, b) {
                    var aNumber = Number($(a).attr('data-sr-' + metricName));
                    var bNumber = Number($(b).attr('data-sr-' + metricName));
                    var result = aNumber > bNumber ? 1 : (aNumber < bNumber ? -1 : 0);
                    if (isDesc)
                        result = -1 * result;

                    if (result == 0 && metricName != "order")
                        result = getComparer("order", false)(a, b);

                    return result;
                };
            }

            var currentSort = "";
            function doSort(allowToggleDesc) {
                var newSort = $("input[name='barSortOrder']:checked").val();
                if (allowToggleDesc && currentSort == newSort) {
                    $('#barSortDesc').click();
                    doSort(false);
                    return;
                }
                currentSort = newSort;
                $('#testview td.testview-item').sortElements(getComparer(newSort, $('#barSortDesc').is(':checked')));
            }


            function doSetHeights(allowSort) {
                var selectedMetric = $("input[name='barHeight']:checked").val();
                $('#testview td.testview-item').setBarSizes(selectedMetric, 60, 0.0);

                if (allowSort && currentSort != selectedMetric) {
                    var $radios = $("input[name='barSortOrder']");
                    $radios.filter('[value=' + selectedMetric + ']').attr('checked', true);
                    $("#barSortDesc").attr("checked", [true]);
                    doSort(false);
                }
            }

            $(document).ready(function () {
                $("input[name='barSortOrder']").click(function () { doSort(true); return true; });
                $("input[name='barSortDesc']").change(function () { doSort(false); });
                $("input[name='barHeight']").change(function () { doSetHeights(true); });

                doSort(false);
                doSetHeights(false);

                $("div.scrollable").css({ 'overflow': 'auto' });
            });
        </script>

        <style type="text/css">
            body 
            {
                color: #000000;
                font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;
                line-height: 130%;
            }
            h1 {
                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;
                font-size: 170%;
                font-weight: bold;
            }            
            h2 {
                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;
                font-size: 130%;
                font-weight: bold;
                margin-bottom: 5px;
            }            
            h3 {
                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;
                font-size: 120%;
                font-weight: bold;
                margin-bottom: 5px;
            }            
            a.bar
            {
                text-decoration: none;
                display: block;
                line-height: 1px;
            }
            .description
            {
                font-style: italic;
            }
            .log 
            {
                width: 600px;
                white-space: pre-wrap;
                display: block;
                margin: 0px;
            }
            .errorMessage 
            {
                width: 600px;
                color: Red;
                font-weight: bold;
            }
            .stackTrace 
            {
                width: 600px;
                white-space: pre-wrap;
                font-style: italic;
                color: Red;
                display: block;
            }
            table.testEvents
            {
                border: solid 1px #e8eef4;
                border-collapse: collapse;
            }
            table.testEvents td
            {
                vertical-align: top;
                padding: 5px;
                border: solid 1px #e8eef4;
            }
            table.testEvents th
            {
                padding: 6px 5px;
                text-align: left;
                background-color: #e8eef4;
                border: solid 1px #e8eef4;                
            }
            .comment
            {
                font-style: italic;
                font-size: smaller;
            }
            .startupBar
            {
                background-color: #EEEEEE;
                cursor: default;
            }
            
            .colorSucceeded
            {
                background-color: #90ED7B;
            }
            .colorIgnored
            {
                background-color: #FFFF85;
            }
            .colorPending
            {
                background-color: #D47BED;
            }
            .colorNothingToRun
            {
                background-color: #CCCCFF;
            }
            .colorSkipped
            {
                background-color: #CCCCFF;
            }
            .colorInconclusive
            {
                background-color: #7BEDED;
            }
            .colorCleanupFailed
            {
                background-color: #FFCCCC;
            }
            .colorRandomlyFailed
            {
                background-color: #EDB07B;
            }
            .colorFailed
            {
                background-color: #ED5F5F;
            }
            .colorInitializationFailed
            {
                background-color: #FF0000;
            }
            .colorFrameworkError
            {
                background-color: #FF0000;
            }
            ul.subNodeLinks
            {
                padding-left: 20px;
                margin: 0px;
            }
            ul.subNodeLinks li
            {
                list-style: none;
            }
            
            /* views general */
            div.scrollable
            {
                /*overflow: auto; - thsi has to be set from js, because of an IE9 bug */
            }
            div.viewbox
            {
                position: relative;
                border: 3px solid #e8eef4;
            }
            div.viewbox table
            {
                border: 0px;
            }
                        
            /* testview */
            #testview
            {
                padding-top: 23px;
            }
            
            table.testview-items td
            {
                vertical-align: bottom;
                padding: 0px 1px 0px 1px;
            }
            td.right-padding, td.left-padding
            {
                width: 25px;
                min-width: 25px;
            }
            table.testview-items a.bar
            {
                width: 5px;
            }
            table.testview-items tr.testview-items-row
            {
                height: 60px;
            }
            
            /* scale */
            table.vertical-scale 
            {
                position: absolute;
                top: 23px;
                left: 0px;
                width: 100%;
                z-index: -100;
            }
            table.vertical-scale td, tr.horizontal-scale td
            {
                font-size: 60%;
                line-height: normal;
            }
            table.vertical-scale tr.scale-max, table.vertical-scale tr.scale-mid 
            {
                height: 30px;
            }
            tr.horizontal-scale, table.vertical-scale tr.scale-min 
            {
                height: 12px;
            }
            
            td.scale-max-label, td.scale-mid-label, td.scale-min-label
            {
                border-top: solid 1px #E6E6E6;
                text-align: left;
                vertical-align: top;
            }
            td.scale-10-label
            {
                border-left: solid 1px #E6E6E6;
                text-align: left;
                vertical-align: bottom;
                padding-left: 1px;
            }
            tr.scale-mid td, tr.scale-min td, tr.scale-max td
            {
                border-top: solid 1px #E6E6E6;
            }
           
            
            /* bar-control */
            #bar-control
            {
                font-size: 60%;
                line-height: normal;
                position: absolute;
                right: 0px;
                top: 0px;
            }
            #bar-control label
            {
                font-weight: bold;
                vertical-align: middle;
            }
            #bar-control .option
            {
                vertical-align: middle;
                text-transform: lowercase;
            }
            #bar-control input[type="checkbox"]
            {
                padding: 0 2px 0 3px;
            }
            #bar-control input
            {
                vertical-align: top;
                height: 12px;
                margin: 0px;
                padding: 0px;
            }
            #bar-control div
            {
                float: right;
                margin: 3px 5px 3px 5px;
            }

            /* timeline view */
            #timelineview
            {
                padding-top: 5px;
            }
            table.timelineview a
            {
                height: 20px;
            }
            table.timelineview td
            {
                vertical-align: bottom;
                padding: 0px 1px 0px 0px;
                border: 0px;
            }
            tr.thread-items-row
            {
                height: 25px;
            }
            tr.thread-items-row td
            {
                vertical-align: bottom;
            }
            td.thread-label
            {
                padding: 0px 6px 0px 6px;
                text-align: right;
                line-height: 18px;
                vertical-align: bottom;
            }
            th.thread-label
            {
                padding: 3px 6px 0px 6px;
                line-height: 18px;
                text-align: left;
                vertical-align: bottom;
            }
        </style>
	</head>
	<body>
        <h1>@Model.Configuration.ProjectName Test Execution Report</h1>
        @RenderSection("ProjectInformation")

        <h2>Result: @Model.Summary.ConcludedResultMessage</h2>
        <table class="testEvents">
            @GetSummaryHeader(null)
            @RenderTotalSummaryRowTail(Model.Summary)
        </table>
        
        <h2>Test Timeline Summary</h2>
        @{
            double msecPerPixel = Model.ExecutionTime.DurationMilliseconds / (Model.TestExecutionResults.Count() * 7);
            var secScale = Math.Max(1.0, Math.Round((msecPerPixel / 1000 * 70) / 2) * 2);
            var scaleItemCount = (int)Math.Floor(Model.ExecutionTime.DurationSeconds / secScale) + 1;
            var pixelScale = secScale * 1000 / msecPerPixel;
        }
        <div id="timelineview" class="viewbox">
            <div class="scrollable">
                <table cellpadding="0" cellspacing="0">
                    <tr>
                        <th class="thread-label" colspan="2">thread</th>
                    </tr>
                    @foreach (var testThread in Model.TestThreads)
                    {
                        <tr class="thread-items-row">
                            <td class="thread-label" title="Machine: @testThread.MachineName">#@testThread.ThreadId</td>
                            <td colspan="@scaleItemCount">
                                <table class="timelineview" cellpadding="0" cellspacing="0">
                                    <tr>
                                        @{
                        currentPixel = 0;
                                        }
                                        @GetTimelineBar(Model.ExecutionTime.StartTime, testThread.ExecutionTime.StartTime, msecPerPixel, null)
                                        @foreach (var test in Model.TestExecutionResults.Where(tr => tr.ThreadId == testThread.ThreadId).OrderBy(tr => tr.ExecutionOrder))
                                        {
                                            @GetTimelineBar(test.ExecutionTime.StartTime, test.ExecutionTime.EndTime, msecPerPixel, test)
                                        }
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    }
                    <tr class="horizontal-scale">
                        <td>&nbsp;</td>
                        @for (int scaleIndex = 0; scaleIndex < scaleItemCount - 1; scaleIndex++)
                        {
                            var width = (int)(Math.Round((scaleIndex + 1) * pixelScale) - Math.Round((scaleIndex) * pixelScale));
                            <td class="scale-10-label" style="width: @(width)px;min-width: @(width)px;">@Math.Round(secScale * scaleIndex)s</td>
                        }
                        <td class="scale-10-label">@Math.Round(secScale * (scaleItemCount - 1))s</td>
                    </tr>
                </table>
            </div>
        </div>

        @RenderSection("TestResultView")
        
        @RenderSection("FeatureSummary")

        <a name="error_summary" />
        <h2>Error Summary</h2>
        <table class="testEvents">
            @GetSummaryHeader("Test")
            @foreach (var testResult in Model.Tests.Where(tr => tr.Result.GetGroup() == TestNodeResultTypeGroup.Failure))
            {
                var testSummary = GetSummary(testResult.TestNode);
                <tr>
                    <td>
                        <a href="#@GetTestNodeAnchor(testResult.TestNode, "t", 0)">@GetTestTitle(testResult)</a>
                        @foreach (var retry in testResult.Executions.Skip(1))
                        {
                            <a href="#@GetTestAnchor(retry)">retry #@retry.TestItemExecutionIndex</a>
                        }
                    </td>
                    @RenderTestExecutionSummaryRowTail(testSummary)
                </tr>
                if (!string.IsNullOrEmpty(testResult.Error))
                {
                <tr>
                    <td colspan="9" style="padding-left: 20px;"><div class="errorMessage">Error: @(testResult.Error)</div></td>
                </tr>
                }
            }
        </table>

        <h2>Scenario Summary</h2>
        @foreach (var fixtureNode in GetTextFixtures())
        {
            <a name="@GetTestNodeAnchor(fixtureNode, "f")" />
            <h3>@fixtureNode.Type: @GetFixtureTitle(fixtureNode)</h3>
            if (!string.IsNullOrEmpty(fixtureNode.Description))
            {
                <div class="description"><pre>@fixtureNode.Description</pre>
                </div>
            }
            <table class="testEvents">
                @GetSummaryHeader("Test", true)
                @foreach (var testNode in fixtureNode.SubNodes)
                {
                    var testSummary = GetSummary(testNode);
                    <tr>
                        <td>
                            @TestNodeLinks(testNode, 0)
                        </td>
                        
                        @RenderTestExecutionSummaryRowTail(testSummary, CalculateDuration(testNode))
                        
                    </tr>
                }
            </table>
        }

        <h2>Execution Details</h2>
        @foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ExecutionOrder))
        {
            var testItem = test.TestItemResult.TestNode;
            <a name="@GetTestAnchor(test)" />
            <h3>@testItem.Type: @GetTestTitle(test)</h3>
            if (!string.IsNullOrEmpty(testItem.Description))
            {
                <div class="description">
                    <pre>@testItem.Description</pre>
                </div>
            }
            if (testItem.Tags.Any())
            {
                <div class="description">
                    tags: @string.Join(", ", testItem.Tags)
                </div>
            }
            <ul>
                <li>Status: @test.ResultType</li>
                <li>Start time: @test.ExecutionTime.StartTime</li>
                <li>Execution time (sec): @test.ExecutionTime.DurationSeconds</li>
                <li>Thread: #@test.ThreadId</li>
                @if (!string.IsNullOrEmpty(test.Result.Error))
                {
                <li>Error: @(test.Result.Error)</li>
                }
            </ul>
            
            <table class="testEvents">
                <tr>
                    <th>Steps</th>
                    <th>Trace</th>
                    <th>Result</th>
                </tr>
                @foreach (var traceEvent in test.Result.TraceEvents)
                {
	                if (!IsRelevant(traceEvent))
	                {
		                continue;
	                }
	                var relatedNode = GetTestNode(traceEvent);
                    <tr>
                        <td>
                            <pre class="log">@(GetBusinessMessages(traceEvent))</pre>
                        </td>
                        <td>
                            <!-- [@traceEvent.Type: @relatedNode.Type - @relatedNode.Title] -->
                            <pre class="log">@Raw(FormatTechMessages(traceEvent.TechMessages.TrimEnd()))</pre>
                            @if (!string.IsNullOrEmpty(traceEvent.Error))
                            {
                                <div class="errorMessage">@Raw(FormatTechMessages(traceEvent.Error))</div>
                                <pre class="stackTrace">@Raw(FormatTechMessages(traceEvent.StackTrace.TrimEnd()))</pre>
                            }
                        </td>
                        <td>@traceEvent.ResultType in @GetSeconds(Math.Round(traceEvent.Duration.TotalSeconds, 3))s</td>
                    </tr>
                }
            </table>
        }
	</body>
</html>
------------- END -----------

The generated source code is: 
------------- START -----------
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompiledRazorTemplates.Dynamic {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Globalization;
    using TechTalk.SpecRun.Framework;
    using TechTalk.SpecRun.Framework.Results;
    using TechTalk.SpecRun.Framework.TestSuiteStructure;
    
    
    public class RazorEngine_2c571914b1944b83b48e161f3951a320 : SpecFlow.Plus.Runner.Reporting.CustomTemplateBase<TestRunResult> {
        


#line default

public RazorEngine.Templating.TemplateWriter GetReportBar(TestItemExecutionResult test)
    {
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
     

WriteLiteralTo(__razor_helper_writer, "    <td");

WriteLiteralTo(__razor_helper_writer, " class=\"testview-item\"");

WriteLiteralTo(__razor_helper_writer, " \r\n        data-sr-exectime=\"");

WriteTo(__razor_helper_writer, GetSeconds(test.ExecutionTime));

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, " data-sr-rescode=\"");

                                               WriteTo(__razor_helper_writer, (int)test.ResultType);

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, " data-sr-order=\"");

                                                                                      WriteTo(__razor_helper_writer, test.ExecutionOrder);

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, " data-sr-acttime=\"");

                                                                                                                             WriteTo(__razor_helper_writer, GetSeconds(test.ActExecutionTime));

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, ">\r\n        <a\r\n            class=\"bar ");

WriteTo(__razor_helper_writer, "color" + test.ResultType);

WriteLiteralTo(__razor_helper_writer, "\" \r\n            style=\"height: ");

WriteTo(__razor_helper_writer, GetBarSize(tr => tr.ExecutionTime.DurationMilliseconds, test, 0.0, 60));

WriteLiteralTo(__razor_helper_writer, "px;\"\r\n            title=\"");

WriteTo(__razor_helper_writer, GetTestBarTooltip(test));

WriteLiteralTo(__razor_helper_writer, "\"\r\n            href=\"#");

WriteTo(__razor_helper_writer, GetTestAnchor(test));

WriteLiteralTo(__razor_helper_writer, "\">&nbsp;</a>\r\n    </td>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter GetTimelineBar(DateTime startTime, DateTime endTime, double msecPerPixel, TestItemExecutionResult test)
    {
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
     
    int endPixel = Math.Max((int)Math.Round((endTime - Model.ExecutionTime.StartTime).TotalMilliseconds / msecPerPixel), currentPixel + 4);
    int size = endPixel - currentPixel;
    currentPixel = endPixel;

WriteLiteralTo(__razor_helper_writer, "    <td>\r\n        <a\r\n            class=\"bar ");

WriteTo(__razor_helper_writer, test == null ? "startupBar" : "color" + test.ResultType.ToString());

WriteLiteralTo(__razor_helper_writer, "\" \r\n            style=\"width: ");

WriteTo(__razor_helper_writer, size - 1);

WriteLiteralTo(__razor_helper_writer, "px;\" \r\n");

            
             if (test != null)
            {

WriteLiteralTo(__razor_helper_writer, "                ");

WriteLiteralTo(__razor_helper_writer, "title=\"");

WriteTo(__razor_helper_writer, GetTestBarTooltip(test));

WriteLiteralTo(__razor_helper_writer, "\" \r\n");

WriteLiteralTo(__razor_helper_writer, "                ");

WriteLiteralTo(__razor_helper_writer, "href=\"#");

WriteTo(__razor_helper_writer, GetTestAnchor(test));

WriteLiteralTo(__razor_helper_writer, "\"\r\n");

            }
            else
            {

WriteLiteralTo(__razor_helper_writer, "                ");

WriteLiteralTo(__razor_helper_writer, "title=\"test thread startup\" \r\n");

            }

WriteLiteralTo(__razor_helper_writer, "        >&nbsp;</a>\r\n    </td>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter GetSummaryHeader(string titleHeader, bool showDuration = false)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <tr>\r\n");

        
         if (titleHeader != null)
        {

WriteLiteralTo(__razor_helper_writer, "            <th>");

WriteTo(__razor_helper_writer, titleHeader);

WriteLiteralTo(__razor_helper_writer, "</th>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "        <th");

WriteLiteralTo(__razor_helper_writer, " colspan=\"2\"");

WriteLiteralTo(__razor_helper_writer, ">Success rate</th>\r\n        <th>Tests</th>\r\n        <th>Succeeded</th>\r\n        <" +
"th>Failed</th>\r\n        <th>Pending</th>\r\n        <th>Ignored</th>\r\n        <th>" +
"Skipped</th>\r\n");

        
         if (showDuration)
        {

WriteLiteralTo(__razor_helper_writer, "            <th>Duration</th>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "    </tr>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter GetSummaryRow(TestCollectionResultSummary summary, string title, string href, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <tr>\r\n");

        
         if (title != null)
        {

WriteLiteralTo(__razor_helper_writer, "            <td><a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 2330), Tuple.Create("\"", 2343)
, Tuple.Create(Tuple.Create("", 2337), Tuple.Create("#", 2337), true)
, Tuple.Create(Tuple.Create("", 2338), Tuple.Create<System.Object, System.Int32>(href
, 2338), false)
);

WriteLiteralTo(__razor_helper_writer, ">");

   WriteTo(__razor_helper_writer, title);

WriteLiteralTo(__razor_helper_writer, "</a></td>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "        ");

WriteTo(__razor_helper_writer, RenderTestExecutionSummaryRowTail(summary, executionDuration));

WriteLiteralTo(__razor_helper_writer, "\r\n    </tr>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderBar(TestNodeResultType testNodeResultType, int count, int total, Func<TestNodeResultType, string> titleFactory)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <td>\r\n        <a");

WriteAttributeTo(__razor_helper_writer, "class", Tuple.Create(" class=\"", 2611), Tuple.Create("\"", 2654)
, Tuple.Create(Tuple.Create("", 2619), Tuple.Create("bar", 2619), true)
, Tuple.Create(Tuple.Create(" ", 2622), Tuple.Create<System.Object, System.Int32>("color" + testNodeResultType
, 2623), false)
);

WriteAttributeTo(__razor_helper_writer, "style", Tuple.Create(" \r\n           style=\"", 2655), Tuple.Create("\"", 2717)
, Tuple.Create(Tuple.Create("", 2676), Tuple.Create("width:", 2676), true)
, Tuple.Create(Tuple.Create(" ", 2682), Tuple.Create<System.Object, System.Int32>(GetPixelBarWidth(total, count)
, 2683), false)
, Tuple.Create(Tuple.Create("", 2714), Tuple.Create("px;", 2714), true)
);

WriteAttributeTo(__razor_helper_writer, "title", Tuple.Create(" \r\n           title=\"", 2718), Tuple.Create("\"", 2772)
, Tuple.Create(Tuple.Create("", 2739), Tuple.Create<System.Object, System.Int32>(titleFactory(testNodeResultType)
, 2739), false)
);

WriteLiteralTo(__razor_helper_writer, " \r\n           ");

            if (testNodeResultType.GetGroup() == TestNodeResultTypeGroup.Failure)
           {

WriteLiteralTo(__razor_helper_writer, "               ");

WriteLiteralTo(__razor_helper_writer, "href=\"#error_summary\"\r\n");

           }

WriteLiteralTo(__razor_helper_writer, "        ></a>\r\n    </td>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderSummaryBars(IEnumerable<KeyValuePair<TestNodeResultType, int>> data, int total, Func<TestNodeResultType, string> titleFactory)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <table");

WriteLiteralTo(__razor_helper_writer, " class=\"timelineview\"");

WriteLiteralTo(__razor_helper_writer, " cellpadding=\"0\"");

WriteLiteralTo(__razor_helper_writer, " cellspacing=\"0\"");

WriteLiteralTo(__razor_helper_writer, ">\r\n        <tr>\r\n");

            
             foreach (var resultCount in data)
            {
                
WriteTo(__razor_helper_writer, RenderBar(resultCount.Key, resultCount.Value, total, titleFactory));

                                                                                   
            }

WriteLiteralTo(__razor_helper_writer, "        </tr>\r\n    </table>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderTotalSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    
WriteTo(__razor_helper_writer, RenderSummaryRowTail(summary.Total, summary.ResultCounts, summary.TotalMessage, summary.GetText, executionDuration));

                                                                                                                        

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderTestExecutionSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    
WriteTo(__razor_helper_writer, RenderSummaryRowTail(summary.Total, summary.TestExecutionResultCounts, summary.TotalMessage, summary.GetText, executionDuration));

                                                                                                                                     

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderSummaryRowTail(int total, IDictionary<TestNodeResultType, int> resultCounts, string totalMessage, Func<TestNodeResultType, string> getText, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    int succeeded = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Success)).Sum(rc => rc.Value);
    int failed = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Failure)).Sum(rc => rc.Value);
    int pending = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Pending)).Sum(rc => rc.Value);
    int ignored = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Ignored)).Sum(rc => rc.Value);
    int skipped = resultCounts[TestNodeResultType.Skipped];


WriteLiteralTo(__razor_helper_writer, "    <td>\r\n");

        
         if (succeeded + failed + pending > 0)
        {

WriteLiteralTo(__razor_helper_writer, "            ");

WriteTo(__razor_helper_writer, GetRoundedSuccessPercentage(succeeded, failed, pending));

WriteLiteralTo(__razor_helper_writer, "%\r\n");

        }
        else
        {

WriteLiteralTo(__razor_helper_writer, "            ");

WriteLiteralTo(__razor_helper_writer, "n/a\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "    </td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>\r\n");

WriteLiteralTo(__razor_helper_writer, "        ");

WriteTo(__razor_helper_writer, RenderSummaryBars(GetOrderedBarChartData(resultCounts), total, getText));

WriteLiteralTo(__razor_helper_writer, "\r\n    </td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, totalMessage);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, succeeded);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, failed);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, pending);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, ignored);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, skipped);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

    if (executionDuration != null)
    {

WriteLiteralTo(__razor_helper_writer, "        <td>");

WriteTo(__razor_helper_writer, executionDuration.Value);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

    }

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter TestItemLinks(TestItem testItem, int level)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    if (level == 0)
    {

WriteLiteralTo(__razor_helper_writer, "        <a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 5257), Tuple.Create("\"", 5301)
, Tuple.Create(Tuple.Create("", 5264), Tuple.Create("#", 5264), true)
, Tuple.Create(Tuple.Create("", 5265), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testItem, "t", 0)
, 5265), false)
);

WriteLiteralTo(__razor_helper_writer, ">");

                          WriteTo(__razor_helper_writer, testItem.Type);

WriteLiteralTo(__razor_helper_writer, ": ");

                                          WriteTo(__razor_helper_writer, testItem.Title);

WriteLiteralTo(__razor_helper_writer, "</a>\r\n");

    }
    else
    {

WriteLiteralTo(__razor_helper_writer, "        <a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 5374), Tuple.Create("\"", 5418)
, Tuple.Create(Tuple.Create("", 5381), Tuple.Create("#", 5381), true)
, Tuple.Create(Tuple.Create("", 5382), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testItem, "t", 0)
, 5382), false)
);

WriteLiteralTo(__razor_helper_writer, ">");

                          WriteTo(__razor_helper_writer, testItem.Title);

WriteLiteralTo(__razor_helper_writer, "</a>\r\n");

    }
    var tiResult = GetTestItemResult(testItem);
    if (tiResult != null)
    {
        foreach (var retry in tiResult.Executions.Skip(1))
        {

WriteLiteralTo(__razor_helper_writer, "            <a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 5616), Tuple.Create("\"", 5687)
, Tuple.Create(Tuple.Create("", 5623), Tuple.Create("#", 5623), true)
, Tuple.Create(Tuple.Create("", 5624), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testItem, "t", retry.TestItemExecutionIndex)
, 5624), false)
);

WriteLiteralTo(__razor_helper_writer, ">retry #");

                                                                WriteTo(__razor_helper_writer, retry.TestItemExecutionIndex);

WriteLiteralTo(__razor_helper_writer, "</a>\r\n");

        }
    }

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter TestNodeLinks(TestNode testNode, int level)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    if (testNode is TestItem)
    {
        
WriteTo(__razor_helper_writer, TestItemLinks((TestItem)testNode, level));

                                                 
    }
    if (testNode is TestCollection)
    {

WriteLiteralTo(__razor_helper_writer, "        <span>");

WriteTo(__razor_helper_writer, testNode.Type);

WriteLiteralTo(__razor_helper_writer, ": ");

WriteTo(__razor_helper_writer, testNode.Title);

WriteLiteralTo(__razor_helper_writer, "</span>\r\n");

WriteLiteralTo(__razor_helper_writer, "        <ul");

WriteLiteralTo(__razor_helper_writer, " class=\"subNodeLinks\"");

WriteLiteralTo(__razor_helper_writer, ">\r\n");

        
         foreach (var subTestNode in ((TestCollection)testNode).SubNodes)
        {

WriteLiteralTo(__razor_helper_writer, "            <li>\r\n");

WriteLiteralTo(__razor_helper_writer, "            ");

WriteTo(__razor_helper_writer, TestNodeLinks(subTestNode, level + 1));

WriteLiteralTo(__razor_helper_writer, "\r\n            </li>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "        </ul>\r\n");

    }

});

#line default

}
#line default


 
    double GetRoundedSuccessPercentage(int succeeded, int failed, int pending)
    {
        double absolute = succeeded + failed + pending;
        double percent = succeeded / absolute;
        double scaledRoundedPercent = Math.Round(percent * 100);
        return scaledRoundedPercent;
    }
    string GetFixtureTitle(TestNode fixtureNode)
    {
        return fixtureNode.IsDefaultTestTarget ? fixtureNode.Title : string.Format("{0} (target: {1})", fixtureNode.Title, fixtureNode.TestTarget);
    }

    TimeSpan CalculateDuration(TestNode testNode)
    {
        TimeSpan executionDuration = TimeSpan.Zero;

        var testNodeResults = Model.TestExecutionResults.Where(tr => tr.TestItemResult.TestNode == testNode);
        foreach (var testNodeResult in testNodeResults)
        {
            executionDuration += testNodeResult.ExecutionTime.Duration;
        }

        return executionDuration;
    }

    double GetPixelBarWidth(double total, double value)
    {
        return Math.Round((value * 200 / total) - 1);
    }

    IEnumerable<KeyValuePair<TestNodeResultType, int>> GetOrderedBarChartData(IEnumerable<KeyValuePair<TestNodeResultType, int>> source)
    {
        return source.Where(rc => rc.Value > 0).OrderByDescending(rc => rc.Key.GetGroup() == TestNodeResultTypeGroup.Success ? 1000 : (int)rc.Key);
    }

        
        public RazorEngine_2c571914b1944b83b48e161f3951a320() {
        }
        
        public override void Execute() {
WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

DefineSection("ProjectInformation", () => {

WriteLiteral("\r\n    <ul>\r\n        <li>Project: ");

                Write(Model.Configuration.ProjectName);

WriteLiteral("</li>\r\n        <li>Configuration: ");

                      Write(Model.Configuration.Name);

WriteLiteral("</li>\r\n        <li>Test Assemblies: ");

                        Write(string.Join(", ", Model.Configuration.TestAssemblyPaths));

WriteLiteral("</li>\r\n        <li>Start Time: ");

                   Write(Model.ExecutionTime.StartTime);

WriteLiteral("</li>\r\n        <li>Duration: ");

                 Write(Model.ExecutionTime.Duration);

WriteLiteral("</li>\r\n        <li>Test Threads: ");

                     Write(Model.TestThreads.Count);

WriteLiteral("</li>\r\n");

        
         if (Model.FrameworkError != null)
        {

WriteLiteral("            <li><div");

WriteLiteral(" class=\"errorMessage\"");

WriteLiteral(">Execution framework error: ");

                                                                 Write(Model.FrameworkError.ToString());

WriteLiteral("</div></li>\r\n");

        }

WriteLiteral("    </ul>\r\n");

});

WriteLiteral("\r\n");

DefineSection("TestResultView", () => {

WriteLiteral("\r\n    <h2>Test Result View</h2>\r\n    <div");

WriteLiteral(" id=\"testview\"");

WriteLiteral(" class=\"viewbox\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" id=\"bar-control\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" id=\"bar-control-sort\"");

WriteLiteral(">\r\n                <label>sort by:</label>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"exectime\"");

WriteLiteral(" />Time</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"acttime\"");

WriteLiteral(" />Act Time</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"order\"");

WriteLiteral(" />Execution</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"rescode\"");

WriteLiteral(" checked=\"checked\"");

WriteLiteral(" />Result</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"barSortDesc\"");

WriteLiteral(" id=\"barSortDesc\"");

WriteLiteral(" checked=\"checked\"");

WriteLiteral(" />desc</span>\r\n            </div>\r\n            <div");

WriteLiteral(" id=\"bar-control-heights\"");

WriteLiteral(">\r\n                <label>heights:</label>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" checked=\"checked\"");

WriteLiteral(" name=\"barHeight\"");

WriteLiteral(" value=\"exectime\"");

WriteLiteral(" />Time</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barHeight\"");

WriteLiteral(" value=\"acttime\"");

WriteLiteral(" />Act Time</span>\r\n            </div>\r\n        </div>\r\n        <table");

WriteLiteral(" class=\"vertical-scale\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n            <tr");

WriteLiteral(" class=\"scale-max\"");

WriteLiteral(">\r\n                <td");

WriteLiteral(" class=\"left-padding scale-max-label\"");

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 9639), Tuple.Create("\"", 9684)
, Tuple.Create(Tuple.Create("", 9649), Tuple.Create<System.Object, System.Int32>(Model.TestExecutionResults.Count()
, 9649), false)
);

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n            </tr>\r\n            <tr");

WriteLiteral(" class=\"scale-mid\"");

WriteLiteral(">\r\n                <td");

WriteLiteral(" class=\"left-padding scale-mid-label\"");

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 9898), Tuple.Create("\"", 9943)
, Tuple.Create(Tuple.Create("", 9908), Tuple.Create<System.Object, System.Int32>(Model.TestExecutionResults.Count()
, 9908), false)
);

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n            </tr>\r\n            <tr");

WriteLiteral(" class=\"scale-min\"");

WriteLiteral(">\r\n                <td");

WriteLiteral(" class=\"left-padding scale-min-label\"");

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 10157), Tuple.Create("\"", 10202)
, Tuple.Create(Tuple.Create("", 10167), Tuple.Create<System.Object, System.Int32>(Model.TestExecutionResults.Count()
, 10167), false)
);

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n            </tr>\r\n        </table>\r\n        <div");

WriteLiteral(" class=\"scrollable\"");

WriteLiteral(">\r\n            <table");

WriteLiteral(" class=\"testview-items\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n                <tr");

WriteLiteral(" class=\"testview-items-row\"");

WriteLiteral(">\r\n                    <td");

WriteLiteral(" class=\"left-padding\"");

WriteLiteral(">&nbsp;</td>\r\n");

                    
                     foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ResultType))
                    {
                        
                   Write(GetReportBar(test));

                                           ;
                    }

WriteLiteral("                    <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n                </tr>\r\n                <tr");

WriteLiteral(" class=\"horizontal-scale\"");

WriteLiteral(">\r\n                    <td");

WriteLiteral(" class=\"left-padding\"");

WriteLiteral(">&nbsp;</td>\r\n                    <td");

WriteLiteral(" colspan=\"10\"");

WriteLiteral(">&nbsp;</td>\r\n");

                    
                     for (int test10Index = 1; test10Index < Model.TestExecutionResults.Count() / 10; test10Index++)
                    {

WriteLiteral("                        <td");

WriteLiteral(" class=\"scale-10-label\"");

WriteLiteral(" colspan=\"10\"");

WriteLiteral(">");

                                                            Write(test10Index * 10);

WriteLiteral("</td>\r\n");

                    }

WriteLiteral("                </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n");

});

DefineSection("FeatureSummary", () => {

WriteLiteral("\r\n    <h2>Feature Summary</h2>\r\n    <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("        ");

   Write(GetSummaryHeader("Feature", true));

WriteLiteral("\r\n\r\n");

        
         foreach (var fixtureNode in GetTextFixtures())
        {
            var fixtureSummary = GetSummary(fixtureNode);
            string fixtureTitle = GetFixtureTitle(fixtureNode);
            string testNodeAnchor = GetTestNodeAnchor(fixtureNode, "f");

            var executionDuration = fixtureNode.SubNodes.Aggregate(TimeSpan.Zero, (acc, testNode) => acc + CalculateDuration(testNode));


WriteLiteral("            <tr>\r\n                <td><a");

WriteAttribute("href", Tuple.Create(" href=\"", 11869), Tuple.Create("\"", 11892)
, Tuple.Create(Tuple.Create("", 11876), Tuple.Create("#", 11876), true)
, Tuple.Create(Tuple.Create("", 11877), Tuple.Create<System.Object, System.Int32>(testNodeAnchor
, 11877), false)
);

WriteLiteral(">");

                                          Write(fixtureTitle);

WriteLiteral("</a></td>\r\n");

WriteLiteral("                ");

           Write(RenderTestExecutionSummaryRowTail(fixtureSummary, executionDuration));

WriteLiteral("\r\n            </tr>\r\n");

        }

WriteLiteral("    </table>\r\n");

});

WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n        <meta");

WriteLiteral(" http-equiv=\"content-type\"");

WriteLiteral(" content=\"text/html; charset=UTF-8\"");

WriteLiteral(" />\r\n\t\t<title>");

          Write(Model.Configuration.ProjectName);

WriteLiteral(" Test Execution Report</title>\r\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"http://code.jquery.com/jquery-1.6.2.min.js\"");

WriteLiteral("></script>\r\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n            /**\r\n            * jQuery.fn.sortElements\r\n            * ---------" +
"-----\r\n            * #author James Padolsey (http://james.padolsey.com)\r\n       " +
"     * #version 0.11\r\n            * #updated 18-MAR-2010\r\n            * #url htt" +
"ps://raw.github.com/jamespadolsey/jQuery-Plugins/master/sortElements/jquery.sort" +
"Elements.js\r\n            * --------------\r\n            * #param Function compara" +
"tor:\r\n            *   Exactly the same behaviour as [1,2,3].sort(comparator)\r\n  " +
"          *   \r\n            * #param Function getSortable\r\n            *   A fun" +
"ction that should return the element that is\r\n            *   to be sorted. The " +
"comparator will run on the\r\n            *   current collection, but you may want" +
" the actual\r\n            *   resulting sort to occur on a parent or another\r\n   " +
"         *   associated element.\r\n            *   \r\n            *   E.g. $(\'td\')" +
".sortElements(comparator, function(){\r\n            *      return this.parentNode" +
"; \r\n            *   })\r\n            *   \r\n            *   The <td>\'s parent (<tr" +
">) will be sorted instead\r\n            *   of the <td> itself.\r\n            */\r\n" +
"            jQuery.fn.sortElements = (function () {\r\n\r\n                var sort " +
"= [].sort;\r\n\r\n                return function (comparator, getSortable) {\r\n\r\n   " +
"                 getSortable = getSortable || function () { return this; };\r\n\r\n " +
"                   var placements = this.map(function () {\r\n\r\n                  " +
"      var sortElement = getSortable.call(this),\r\n                parentNode = so" +
"rtElement.parentNode,\r\n\r\n                        // Since the element itself wil" +
"l change position, we have\r\n                        // to have some way of stori" +
"ng it\'s original position in\r\n                        // the DOM. The easiest wa" +
"y is to have a \'flag\' node:\r\n                nextSibling = parentNode.insertBefo" +
"re(\r\n                    document.createTextNode(\'\'),\r\n                    sortE" +
"lement.nextSibling\r\n                );\r\n\r\n                        return functio" +
"n () {\r\n\r\n                            if (parentNode === this) {\r\n              " +
"                  throw new Error(\r\n                        \"You can\'t sort elem" +
"ents if any one is a descendant of another.\"\r\n                    );\r\n          " +
"                  }\r\n\r\n                            // Insert before flag:\r\n     " +
"                       parentNode.insertBefore(this, nextSibling);\r\n            " +
"                // Remove flag:\r\n                            parentNode.removeCh" +
"ild(nextSibling);\r\n\r\n                        };\r\n\r\n                    });\r\n\r\n  " +
"                  return sort.call(this, comparator).each(function (i) {\r\n      " +
"                  placements[i].call(getSortable.call(this));\r\n                 " +
"   });\r\n\r\n                };\r\n\r\n            })();\r\n        </script>\r\n        <s" +
"cript");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n            jQuery.fn.setBarSizes = (function () {\r\n                return fun" +
"ction (metricName, maxBarSize, min) {\r\n                    var max = Math.max.ap" +
"ply(Math, $.makeArray($(this).map(function () { return Number($(this).attr(\'data" +
"-sr-\' + metricName)); })));\r\n                    var scale = 1.0;\r\n             " +
"       while (max > 0.0 && max <= 10.0) {\r\n                        scale = scale" +
" * 10.0;\r\n                        max = max * 10.0;\r\n                    }\r\n    " +
"                max = (Math.ceil(max / 2) * 2) / scale;\r\n\r\n                    t" +
"his.each(function () {\r\n                        var barAnchor = $(this).find(\'a\'" +
");\r\n                        var actual = $(this).attr(\'data-sr-\' + metricName);\r" +
"\n                        var newHeight = Math.max(Math.round(maxBarSize * (actua" +
"l - min) / (max - min)), 2);\r\n                        barAnchor.css({ height: ne" +
"wHeight });\r\n                    });\r\n\r\n                    var unit = \"\";\r\n    " +
"                if (metricName.substr(metricName.length - 4, 4) === \"time\")\r\n   " +
"                     unit = \"s\";\r\n\r\n                    $(\'#testview .scale-min-" +
"label\').each(function () {\r\n                        $(this).text(min.toString() " +
"+ unit);\r\n                    });\r\n                    $(\'#testview .scale-max-l" +
"abel\').each(function () {\r\n                        $(this).text(max.toString() +" +
" unit);\r\n                    });\r\n                    var mid = max / 2;\r\n      " +
"              $(\'#testview .scale-mid-label\').each(function () {\r\n              " +
"          $(this).text(mid.toString() + unit);\r\n                    });\r\n       " +
"         };\r\n            })();\r\n\r\n            function getComparer(metricName, i" +
"sDesc) {\r\n                return function (a, b) {\r\n                    var aNum" +
"ber = Number($(a).attr(\'data-sr-\' + metricName));\r\n                    var bNumb" +
"er = Number($(b).attr(\'data-sr-\' + metricName));\r\n                    var result" +
" = aNumber > bNumber ? 1 : (aNumber < bNumber ? -1 : 0);\r\n                    if" +
" (isDesc)\r\n                        result = -1 * result;\r\n\r\n                    " +
"if (result == 0 && metricName != \"order\")\r\n                        result = getC" +
"omparer(\"order\", false)(a, b);\r\n\r\n                    return result;\r\n          " +
"      };\r\n            }\r\n\r\n            var currentSort = \"\";\r\n            functi" +
"on doSort(allowToggleDesc) {\r\n                var newSort = $(\"input[name=\'barSo" +
"rtOrder\']:checked\").val();\r\n                if (allowToggleDesc && currentSort =" +
"= newSort) {\r\n                    $(\'#barSortDesc\').click();\r\n                  " +
"  doSort(false);\r\n                    return;\r\n                }\r\n              " +
"  currentSort = newSort;\r\n                $(\'#testview td.testview-item\').sortEl" +
"ements(getComparer(newSort, $(\'#barSortDesc\').is(\':checked\')));\r\n            }\r\n" +
"\r\n\r\n            function doSetHeights(allowSort) {\r\n                var selected" +
"Metric = $(\"input[name=\'barHeight\']:checked\").val();\r\n                $(\'#testvi" +
"ew td.testview-item\').setBarSizes(selectedMetric, 60, 0.0);\r\n\r\n                i" +
"f (allowSort && currentSort != selectedMetric) {\r\n                    var $radio" +
"s = $(\"input[name=\'barSortOrder\']\");\r\n                    $radios.filter(\'[value" +
"=\' + selectedMetric + \']\').attr(\'checked\', true);\r\n                    $(\"#barSo" +
"rtDesc\").attr(\"checked\", [true]);\r\n                    doSort(false);\r\n         " +
"       }\r\n            }\r\n\r\n            $(document).ready(function () {\r\n        " +
"        $(\"input[name=\'barSortOrder\']\").click(function () { doSort(true); return" +
" true; });\r\n                $(\"input[name=\'barSortDesc\']\").change(function () { " +
"doSort(false); });\r\n                $(\"input[name=\'barHeight\']\").change(function" +
" () { doSetHeights(true); });\r\n\r\n                doSort(false);\r\n               " +
" doSetHeights(false);\r\n\r\n                $(\"div.scrollable\").css({ \'overflow\': \'" +
"auto\' });\r\n            });\r\n        </script>\r\n\r\n        <style");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(">\r\n            body \r\n            {\r\n                color: #000000;\r\n           " +
"     font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;\r\n               " +
" line-height: 130%;\r\n            }\r\n            h1 {\r\n                font-famil" +
"y: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;\r\n                font-si" +
"ze: 170%;\r\n                font-weight: bold;\r\n            }            \r\n      " +
"      h2 {\r\n                font-family: Trebuchet MS,Liberation Sans,DejaVu San" +
"s,sans-serif;\r\n                font-size: 130%;\r\n                font-weight: bo" +
"ld;\r\n                margin-bottom: 5px;\r\n            }            \r\n           " +
" h3 {\r\n                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,san" +
"s-serif;\r\n                font-size: 120%;\r\n                font-weight: bold;\r\n" +
"                margin-bottom: 5px;\r\n            }            \r\n            a.ba" +
"r\r\n            {\r\n                text-decoration: none;\r\n                displa" +
"y: block;\r\n                line-height: 1px;\r\n            }\r\n            .descri" +
"ption\r\n            {\r\n                font-style: italic;\r\n            }\r\n      " +
"      .log \r\n            {\r\n                width: 600px;\r\n                white" +
"-space: pre-wrap;\r\n                display: block;\r\n                margin: 0px;" +
"\r\n            }\r\n            .errorMessage \r\n            {\r\n                widt" +
"h: 600px;\r\n                color: Red;\r\n                font-weight: bold;\r\n    " +
"        }\r\n            .stackTrace \r\n            {\r\n                width: 600px" +
";\r\n                white-space: pre-wrap;\r\n                font-style: italic;\r\n" +
"                color: Red;\r\n                display: block;\r\n            }\r\n   " +
"         table.testEvents\r\n            {\r\n                border: solid 1px #e8e" +
"ef4;\r\n                border-collapse: collapse;\r\n            }\r\n            tab" +
"le.testEvents td\r\n            {\r\n                vertical-align: top;\r\n         " +
"       padding: 5px;\r\n                border: solid 1px #e8eef4;\r\n            }\r" +
"\n            table.testEvents th\r\n            {\r\n                padding: 6px 5p" +
"x;\r\n                text-align: left;\r\n                background-color: #e8eef4" +
";\r\n                border: solid 1px #e8eef4;                \r\n            }\r\n  " +
"          .comment\r\n            {\r\n                font-style: italic;\r\n        " +
"        font-size: smaller;\r\n            }\r\n            .startupBar\r\n           " +
" {\r\n                background-color: #EEEEEE;\r\n                cursor: default;" +
"\r\n            }\r\n            \r\n            .colorSucceeded\r\n            {\r\n     " +
"           background-color: #90ED7B;\r\n            }\r\n            .colorIgnored\r" +
"\n            {\r\n                background-color: #FFFF85;\r\n            }\r\n     " +
"       .colorPending\r\n            {\r\n                background-color: #D47BED;\r" +
"\n            }\r\n            .colorNothingToRun\r\n            {\r\n                b" +
"ackground-color: #CCCCFF;\r\n            }\r\n            .colorSkipped\r\n           " +
" {\r\n                background-color: #CCCCFF;\r\n            }\r\n            .colo" +
"rInconclusive\r\n            {\r\n                background-color: #7BEDED;\r\n      " +
"      }\r\n            .colorCleanupFailed\r\n            {\r\n                backgro" +
"und-color: #FFCCCC;\r\n            }\r\n            .colorRandomlyFailed\r\n          " +
"  {\r\n                background-color: #EDB07B;\r\n            }\r\n            .col" +
"orFailed\r\n            {\r\n                background-color: #ED5F5F;\r\n           " +
" }\r\n            .colorInitializationFailed\r\n            {\r\n                backg" +
"round-color: #FF0000;\r\n            }\r\n            .colorFrameworkError\r\n        " +
"    {\r\n                background-color: #FF0000;\r\n            }\r\n            ul" +
".subNodeLinks\r\n            {\r\n                padding-left: 20px;\r\n             " +
"   margin: 0px;\r\n            }\r\n            ul.subNodeLinks li\r\n            {\r\n " +
"               list-style: none;\r\n            }\r\n            \r\n            /* vi" +
"ews general */\r\n            div.scrollable\r\n            {\r\n                /*ove" +
"rflow: auto; - thsi has to be set from js, because of an IE9 bug */\r\n           " +
" }\r\n            div.viewbox\r\n            {\r\n                position: relative;\r" +
"\n                border: 3px solid #e8eef4;\r\n            }\r\n            div.view" +
"box table\r\n            {\r\n                border: 0px;\r\n            }\r\n         " +
"               \r\n            /* testview */\r\n            #testview\r\n            " +
"{\r\n                padding-top: 23px;\r\n            }\r\n            \r\n            " +
"table.testview-items td\r\n            {\r\n                vertical-align: bottom;\r" +
"\n                padding: 0px 1px 0px 1px;\r\n            }\r\n            td.right-" +
"padding, td.left-padding\r\n            {\r\n                width: 25px;\r\n         " +
"       min-width: 25px;\r\n            }\r\n            table.testview-items a.bar\r\n" +
"            {\r\n                width: 5px;\r\n            }\r\n            table.tes" +
"tview-items tr.testview-items-row\r\n            {\r\n                height: 60px;\r" +
"\n            }\r\n            \r\n            /* scale */\r\n            table.vertica" +
"l-scale \r\n            {\r\n                position: absolute;\r\n                to" +
"p: 23px;\r\n                left: 0px;\r\n                width: 100%;\r\n            " +
"    z-index: -100;\r\n            }\r\n            table.vertical-scale td, tr.horiz" +
"ontal-scale td\r\n            {\r\n                font-size: 60%;\r\n                " +
"line-height: normal;\r\n            }\r\n            table.vertical-scale tr.scale-m" +
"ax, table.vertical-scale tr.scale-mid \r\n            {\r\n                height: 3" +
"0px;\r\n            }\r\n            tr.horizontal-scale, table.vertical-scale tr.sc" +
"ale-min \r\n            {\r\n                height: 12px;\r\n            }\r\n         " +
"   \r\n            td.scale-max-label, td.scale-mid-label, td.scale-min-label\r\n   " +
"         {\r\n                border-top: solid 1px #E6E6E6;\r\n                text" +
"-align: left;\r\n                vertical-align: top;\r\n            }\r\n            " +
"td.scale-10-label\r\n            {\r\n                border-left: solid 1px #E6E6E6" +
";\r\n                text-align: left;\r\n                vertical-align: bottom;\r\n " +
"               padding-left: 1px;\r\n            }\r\n            tr.scale-mid td, t" +
"r.scale-min td, tr.scale-max td\r\n            {\r\n                border-top: soli" +
"d 1px #E6E6E6;\r\n            }\r\n           \r\n            \r\n            /* bar-con" +
"trol */\r\n            #bar-control\r\n            {\r\n                font-size: 60%" +
";\r\n                line-height: normal;\r\n                position: absolute;\r\n  " +
"              right: 0px;\r\n                top: 0px;\r\n            }\r\n           " +
" #bar-control label\r\n            {\r\n                font-weight: bold;\r\n        " +
"        vertical-align: middle;\r\n            }\r\n            #bar-control .option" +
"\r\n            {\r\n                vertical-align: middle;\r\n                text-t" +
"ransform: lowercase;\r\n            }\r\n            #bar-control input[type=\"checkb" +
"ox\"]\r\n            {\r\n                padding: 0 2px 0 3px;\r\n            }\r\n     " +
"       #bar-control input\r\n            {\r\n                vertical-align: top;\r\n" +
"                height: 12px;\r\n                margin: 0px;\r\n                pad" +
"ding: 0px;\r\n            }\r\n            #bar-control div\r\n            {\r\n        " +
"        float: right;\r\n                margin: 3px 5px 3px 5px;\r\n            }\r\n" +
"\r\n            /* timeline view */\r\n            #timelineview\r\n            {\r\n   " +
"             padding-top: 5px;\r\n            }\r\n            table.timelineview a\r" +
"\n            {\r\n                height: 20px;\r\n            }\r\n            table." +
"timelineview td\r\n            {\r\n                vertical-align: bottom;\r\n       " +
"         padding: 0px 1px 0px 0px;\r\n                border: 0px;\r\n            }\r" +
"\n            tr.thread-items-row\r\n            {\r\n                height: 25px;\r\n" +
"            }\r\n            tr.thread-items-row td\r\n            {\r\n              " +
"  vertical-align: bottom;\r\n            }\r\n            td.thread-label\r\n         " +
"   {\r\n                padding: 0px 6px 0px 6px;\r\n                text-align: rig" +
"ht;\r\n                line-height: 18px;\r\n                vertical-align: bottom;" +
"\r\n            }\r\n            th.thread-label\r\n            {\r\n                pad" +
"ding: 3px 6px 0px 6px;\r\n                line-height: 18px;\r\n                text" +
"-align: left;\r\n                vertical-align: bottom;\r\n            }\r\n        <" +
"/style>\r\n\t</head>\r\n\t<body>\r\n        <h1>");

       Write(Model.Configuration.ProjectName);

WriteLiteral(" Test Execution Report</h1>\r\n");

WriteLiteral("        ");

   Write(RenderSection("ProjectInformation"));

WriteLiteral("\r\n\r\n        <h2>Result: ");

               Write(Model.Summary.ConcludedResultMessage);

WriteLiteral("</h2>\r\n        <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("            ");

       Write(GetSummaryHeader(null));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(RenderTotalSummaryRowTail(Model.Summary));

WriteLiteral("\r\n        </table>\r\n        \r\n        <h2>Test Timeline Summary</h2>\r\n");

        
          
            double msecPerPixel = Model.ExecutionTime.DurationMilliseconds / (Model.TestExecutionResults.Count() * 7);
            var secScale = Math.Max(1.0, Math.Round((msecPerPixel / 1000 * 70) / 2) * 2);
            var scaleItemCount = (int)Math.Floor(Model.ExecutionTime.DurationSeconds / secScale) + 1;
            var pixelScale = secScale * 1000 / msecPerPixel;
        
WriteLiteral("\r\n        <div");

WriteLiteral(" id=\"timelineview\"");

WriteLiteral(" class=\"viewbox\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"scrollable\"");

WriteLiteral(">\r\n                <table");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n                    <tr>\r\n                        <th");

WriteLiteral(" class=\"thread-label\"");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(">thread</th>\r\n                    </tr>\r\n");

                    
                     foreach (var testThread in Model.TestThreads)
                    {

WriteLiteral("                        <tr");

WriteLiteral(" class=\"thread-items-row\"");

WriteLiteral(">\r\n                            <td");

WriteLiteral(" class=\"thread-label\"");

WriteAttribute("title", Tuple.Create(" title=\"", 28722), Tuple.Create("\"", 28762)
, Tuple.Create(Tuple.Create("", 28730), Tuple.Create("Machine:", 28730), true)
, Tuple.Create(Tuple.Create(" ", 28738), Tuple.Create<System.Object, System.Int32>(testThread.MachineName
, 28739), false)
);

WriteLiteral(">#");

                                                                                          Write(testThread.ThreadId);

WriteLiteral("</td>\r\n                            <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 28823), Tuple.Create("\"", 28848)
, Tuple.Create(Tuple.Create("", 28833), Tuple.Create<System.Object, System.Int32>(scaleItemCount
, 28833), false)
);

WriteLiteral(">\r\n                                <table");

WriteLiteral(" class=\"timelineview\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n                                    <tr>\r\n");

                                        
                                          
                        currentPixel = 0;
                                        
WriteLiteral("\r\n");

WriteLiteral("                                        ");

                                   Write(GetTimelineBar(Model.ExecutionTime.StartTime, testThread.ExecutionTime.StartTime, msecPerPixel, null));

WriteLiteral("\r\n");

                                        
                                         foreach (var test in Model.TestExecutionResults.Where(tr => tr.ThreadId == testThread.ThreadId).OrderBy(tr => tr.ExecutionOrder))
                                        {
                                            
                                       Write(GetTimelineBar(test.ExecutionTime.StartTime, test.ExecutionTime.EndTime, msecPerPixel, test));

                                                                                                                                         
                                        }

WriteLiteral("                                    </tr>\r\n                                </tabl" +
"e>\r\n                            </td>\r\n                        </tr>\r\n");

                    }

WriteLiteral("                    <tr");

WriteLiteral(" class=\"horizontal-scale\"");

WriteLiteral(">\r\n                        <td>&nbsp;</td>\r\n");

                        
                         for (int scaleIndex = 0; scaleIndex < scaleItemCount - 1; scaleIndex++)
                        {
                            var width = (int)(Math.Round((scaleIndex + 1) * pixelScale) - Math.Round((scaleIndex) * pixelScale));

WriteLiteral("                            <td");

WriteLiteral(" class=\"scale-10-label\"");

WriteAttribute("style", Tuple.Create(" style=\"", 30235), Tuple.Create("\"", 30283)
, Tuple.Create(Tuple.Create("", 30243), Tuple.Create("width:", 30243), true)
, Tuple.Create(Tuple.Create(" ", 30249), Tuple.Create<System.Object, System.Int32>(width
, 30250), false)
, Tuple.Create(Tuple.Create("", 30258), Tuple.Create("px;min-width:", 30258), true)
          , Tuple.Create(Tuple.Create(" ", 30271), Tuple.Create<System.Object, System.Int32>(width
, 30272), false)
, Tuple.Create(Tuple.Create("", 30280), Tuple.Create("px;", 30280), true)
);

WriteLiteral(">");

                                                                                                   Write(Math.Round(secScale * scaleIndex));

WriteLiteral("s</td>\r\n");

                        }

WriteLiteral("                        <td");

WriteLiteral(" class=\"scale-10-label\"");

WriteLiteral(">");

                                              Write(Math.Round(secScale * (scaleItemCount - 1)));

WriteLiteral("s</td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n" +
"        </div>\r\n\r\n");

WriteLiteral("        ");

   Write(RenderSection("TestResultView"));

WriteLiteral("\r\n        \r\n");

WriteLiteral("        ");

   Write(RenderSection("FeatureSummary"));

WriteLiteral("\r\n\r\n        <a");

WriteLiteral(" name=\"error_summary\"");

WriteLiteral(" />\r\n        <h2>Error Summary</h2>\r\n        <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("            ");

       Write(GetSummaryHeader("Test"));

WriteLiteral("\r\n");

            
             foreach (var testResult in Model.Tests.Where(tr => tr.Result.GetGroup() == TestNodeResultTypeGroup.Failure))
            {
                var testSummary = GetSummary(testResult.TestNode);

WriteLiteral("                <tr>\r\n                    <td>\r\n                        <a");

WriteAttribute("href", Tuple.Create(" href=\"", 31067), Tuple.Create("\"", 31122)
, Tuple.Create(Tuple.Create("", 31074), Tuple.Create("#", 31074), true)
, Tuple.Create(Tuple.Create("", 31075), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testResult.TestNode, "t", 0)
, 31075), false)
);

WriteLiteral(">");

                                                                              Write(GetTestTitle(testResult));

WriteLiteral("</a>\r\n");

                        
                         foreach (var retry in testResult.Executions.Skip(1))
                        {

WriteLiteral("                            <a");

WriteAttribute("href", Tuple.Create(" href=\"", 31291), Tuple.Create("\"", 31320)
, Tuple.Create(Tuple.Create("", 31298), Tuple.Create("#", 31298), true)
, Tuple.Create(Tuple.Create("", 31299), Tuple.Create<System.Object, System.Int32>(GetTestAnchor(retry)
, 31299), false)
);

WriteLiteral(">retry #");

                                                               Write(retry.TestItemExecutionIndex);

WriteLiteral("</a>\r\n");

                        }

WriteLiteral("                    </td>\r\n");

WriteLiteral("                    ");

               Write(RenderTestExecutionSummaryRowTail(testSummary));

WriteLiteral("\r\n                </tr>\r\n");

                if (!string.IsNullOrEmpty(testResult.Error))
                {

WriteLiteral("                <tr>\r\n                    <td");

WriteLiteral(" colspan=\"9\"");

WriteLiteral(" style=\"padding-left: 20px;\"");

WriteLiteral("><div");

WriteLiteral(" class=\"errorMessage\"");

WriteLiteral(">Error: ");

                                                                                             Write(testResult.Error);

WriteLiteral("</div></td>\r\n                </tr>\r\n");

                }
            }

WriteLiteral("        </table>\r\n\r\n        <h2>Scenario Summary</h2>\r\n");

        
         foreach (var fixtureNode in GetTextFixtures())
        {

WriteLiteral("            <a");

WriteAttribute("name", Tuple.Create(" name=\"", 31936), Tuple.Create("\"", 31979)
, Tuple.Create(Tuple.Create("", 31943), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(fixtureNode, "f")
, 31943), false)
);

WriteLiteral(" />\r\n");

WriteLiteral("            <h3>");

           Write(fixtureNode.Type);

WriteLiteral(": ");

                              Write(GetFixtureTitle(fixtureNode));

WriteLiteral("</h3>\r\n");

            if (!string.IsNullOrEmpty(fixtureNode.Description))
            {

WriteLiteral("                <div");

WriteLiteral(" class=\"description\"");

WriteLiteral("><pre>");

                                         Write(fixtureNode.Description);

WriteLiteral("</pre>\r\n                </div>\r\n");

            }

WriteLiteral("            <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("                ");

           Write(GetSummaryHeader("Test", true));

WriteLiteral("\r\n");

                
                 foreach (var testNode in fixtureNode.SubNodes)
                {
                    var testSummary = GetSummary(testNode);

WriteLiteral("                    <tr>\r\n                        <td>\r\n");

WriteLiteral("                            ");

                       Write(TestNodeLinks(testNode, 0));

WriteLiteral("\r\n                        </td>\r\n                        \r\n");

WriteLiteral("                        ");

                   Write(RenderTestExecutionSummaryRowTail(testSummary, CalculateDuration(testNode)));

WriteLiteral("\r\n                        \r\n                    </tr>\r\n");

                }

WriteLiteral("            </table>\r\n");

        }

WriteLiteral("\r\n        <h2>Execution Details</h2>\r\n");

        
         foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ExecutionOrder))
        {
            var testItem = test.TestItemResult.TestNode;

WriteLiteral("            <a");

WriteAttribute("name", Tuple.Create(" name=\"", 33077), Tuple.Create("\"", 33104)
, Tuple.Create(Tuple.Create("", 33084), Tuple.Create<System.Object, System.Int32>(GetTestAnchor(test)
, 33084), false)
);

WriteLiteral(" />\r\n");

WriteLiteral("            <h3>");

           Write(testItem.Type);

WriteLiteral(": ");

                           Write(GetTestTitle(test));

WriteLiteral("</h3>\r\n");

            if (!string.IsNullOrEmpty(testItem.Description))
            {

WriteLiteral("                <div");

WriteLiteral(" class=\"description\"");

WriteLiteral(">\r\n                    <pre>");

                    Write(testItem.Description);

WriteLiteral("</pre>\r\n                </div>\r\n");

            }
            if (testItem.Tags.Any())
            {

WriteLiteral("                <div");

WriteLiteral(" class=\"description\"");

WriteLiteral(">\r\n                    tags: ");

                     Write(string.Join(", ", testItem.Tags));

WriteLiteral("\r\n                </div>\r\n");

            }

WriteLiteral("            <ul>\r\n                <li>Status: ");

                       Write(test.ResultType);

WriteLiteral("</li>\r\n                <li>Start time: ");

                           Write(test.ExecutionTime.StartTime);

WriteLiteral("</li>\r\n                <li>Execution time (sec): ");

                                     Write(test.ExecutionTime.DurationSeconds);

WriteLiteral("</li>\r\n                <li>Thread: #");

                        Write(test.ThreadId);

WriteLiteral("</li>\r\n");

                
                 if (!string.IsNullOrEmpty(test.Result.Error))
                {

WriteLiteral("                <li>Error: ");

                       Write(test.Result.Error);

WriteLiteral("</li>\r\n");

                }

WriteLiteral("            </ul>\r\n");

            

WriteLiteral("            <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n                <tr>\r\n                    <th>Steps</th>\r\n                    " +
"<th>Trace</th>\r\n                    <th>Result</th>\r\n                </tr>\r\n");

                
                 foreach (var traceEvent in test.Result.TraceEvents)
                {
	                if (!IsRelevant(traceEvent))
	                {
		                continue;
	                }
	                var relatedNode = GetTestNode(traceEvent);

WriteLiteral("                    <tr>\r\n                        <td>\r\n                         " +
"   <pre");

WriteLiteral(" class=\"log\"");

WriteLiteral(">");

                                         Write(GetBusinessMessages(traceEvent));

WriteLiteral("</pre>\r\n                        </td>\r\n                        <td>\r\n            " +
"                <!-- [");

                             Write(traceEvent.Type);

WriteLiteral(": ");

                                               Write(relatedNode.Type);

WriteLiteral(" - ");

                                                                   Write(relatedNode.Title);

WriteLiteral("] -->\r\n                            <pre");

WriteLiteral(" class=\"log\"");

WriteLiteral(">");

                                        Write(Raw(FormatTechMessages(traceEvent.TechMessages.TrimEnd())));

WriteLiteral("</pre>\r\n");

                            
                             if (!string.IsNullOrEmpty(traceEvent.Error))
                            {

WriteLiteral("                                <div");

WriteLiteral(" class=\"errorMessage\"");

WriteLiteral(">");

                                                     Write(Raw(FormatTechMessages(traceEvent.Error)));

WriteLiteral("</div>\r\n");

WriteLiteral("                                <pre");

WriteLiteral(" class=\"stackTrace\"");

WriteLiteral(">");

                                                   Write(Raw(FormatTechMessages(traceEvent.StackTrace.TrimEnd())));

WriteLiteral("</pre>\r\n");

                            }

WriteLiteral("                        </td>\r\n                        <td>");

                       Write(traceEvent.ResultType);

WriteLiteral(" in ");

                                                 Write(GetSeconds(Math.Round(traceEvent.Duration.TotalSeconds, 3)));

WriteLiteral("s</td>\r\n                    </tr>\r\n");

                }

WriteLiteral("            </table>\r\n");

        }

WriteLiteral("\t</body>\r\n</html>");

        }
    }
}

------------- END -----------


List of loaded Assemblies:
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\SpecFlow.Plus.Runner.Reporting.exe
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\BoDi.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\CommandLine.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\SpecFlow.Plus.Shared.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\TechTalk.SpecRun.Framework.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\FSharp.Core.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\TechTalk.SpecRun.Framework.Interfaces.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\TechTalk.SpecRun.Framework.Utils.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\Newtonsoft.Json.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Numerics\v4.0_4.0.0.0__b77a5c561934e089\System.Numerics.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_64\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\RazorEngine.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\System.Web.Razor.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.resources\v4.0_4.0.0.0_pt-BR_b77a5c561934e089\System.resources.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll
   em RazorEngine.Compilation.DirectCompilerServiceBase.CompileTypeImpl(TypeContext context)
   em RazorEngine.Compilation.DirectCompilerServiceBase.CompileType_Windows(TypeContext context)
   em RazorEngine.Compilation.DirectCompilerServiceBase.CompileType(TypeContext context)
   em RazorEngine.Templating.RazorEngineCore.CreateTemplateType(ITemplateSource razorTemplate, Type modelType)
   em RazorEngine.Templating.RazorEngineCore.Compile(ITemplateKey key, Type modelType)
   em RazorEngine.Templating.RazorEngineService.CompileAndCacheInternal(ITemplateKey key, Type modelType)
   em RazorEngine.Templating.RazorEngineService.GetCompiledTemplate(ITemplateKey key, Type modelType, Boolean compileOnCacheMiss)
   em RazorEngine.Templating.RazorEngineService.RunCompile(ITemplateKey key, TextWriter writer, Type modelType, Object model, DynamicViewBag viewBag)
   em RazorEngine.Templating.RazorEngineServiceExtensions.<>c__DisplayClass15_0.<RunCompile>b__0(TextWriter writer)
   em RazorEngine.Templating.RazorEngineServiceExtensions.WithWriter(Action`1 withWriter)
   em SpecFlow.Plus.Runner.Reporting.Rendering.RazorReportRenderer.RenderReport(TestRunResult testRunResult, ReportConfigurationEntry reportConfigurationEntry)
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4359096-03:00;Thread#1;Error;RazorEngine.Templating.RazorEngineCompilerError
2020-02-19T17:43:54.4379097-03:00;Thread#1;Error;Error when creating report from template "ReportTemplate.cshtml".
RazorEngine.Templating.TemplateCompilationException: Errors while compiling a Template.
Please try the following to solve the situation:
  * If the problem is about missing/invalid references or multiple defines either try to load 
    the missing references manually (in the compiling appdomain!) or
    Specify your references manually by providing your own IReferenceResolver implementation.
    See https://antaris.github.io/RazorEngine/ReferenceResolver.html for details.
    Currently all references have to be available as files!
  * If you get 'class' does not contain a definition for 'member': 
        try another modelType (for example 'null' to make the model dynamic).
        NOTE: You CANNOT use typeof(dynamic) to make the model dynamic!
    Or try to use static instead of anonymous/dynamic types.
More details about the error:
 - warning: (0, 0) Presumindo que a referência de assembly 'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' corresponda a 'Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed', talvez seja necessário fornecer a política em tempo de execução
	 - error: (283, 13) Tipo 'TechTalk.SpecRun.Framework.Results.TestNodeResultTypeGroup' está definido em um assembly que não é usado como referência. Adicione uma referência ao assembly 'TechTalk.SpecRun.Common, Version=3.1.0.0, Culture=neutral, PublicKeyToken=d0fc5cc18b3b389b'.
	 - error: (283, 50) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - warning: (0, 0) Presumindo que a referência de assembly 'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' corresponda a 'Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed', talvez seja necessário fornecer a política em tempo de execução
	 - error: (396, 63) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (397, 60) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (398, 61) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (399, 61) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (664, 94) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
	 - error: (1446, 89) O nome 'TestNodeResultTypeGroup' não existe no contexto atual
Temporary files of the compilation can be found in (please delete the folder): C:\Users\Maressa\AppData\Local\Temp\RazorEngine_s023as4v.wed
The template we tried to compile is: 
------------- START -----------
@inherits SpecFlow.Plus.Runner.Reporting.CustomTemplateBase<TestRunResult>

@using System
@using System.Collections.Generic
@using System.Linq
@using System.Globalization
@using TechTalk.SpecRun.Framework
@using TechTalk.SpecRun.Framework.Results
@using TechTalk.SpecRun.Framework.TestSuiteStructure
@helper GetReportBar(TestItemExecutionResult test)
    {
    <td class="testview-item" 
        data-sr-exectime="@GetSeconds(test.ExecutionTime)" data-sr-rescode="@((int)test.ResultType)" data-sr-order="@test.ExecutionOrder" data-sr-acttime="@GetSeconds(test.ActExecutionTime)">
        <a
            class="bar @("color" + test.ResultType)" 
            style="height: @GetBarSize(tr => tr.ExecutionTime.DurationMilliseconds, test, 0.0, 60)px;"
            title="@GetTestBarTooltip(test)"
            href="#@GetTestAnchor(test)">&nbsp;</a>
    </td>
}
@helper GetTimelineBar(DateTime startTime, DateTime endTime, double msecPerPixel, TestItemExecutionResult test)
    {
    int endPixel = Math.Max((int)Math.Round((endTime - Model.ExecutionTime.StartTime).TotalMilliseconds / msecPerPixel), currentPixel + 4);
    int size = endPixel - currentPixel;
    currentPixel = endPixel;
    <td>
        <a
            class="bar @(test == null ? "startupBar" : "color" + test.ResultType.ToString())" 
            style="width: @(size - 1)px;" 
            @if (test != null)
            {
                @:title="@GetTestBarTooltip(test)" 
                @:href="#@GetTestAnchor(test)"
            }
            else
            {
                @:title="test thread startup" 
            }
        >&nbsp;</a>
    </td>
}
@helper GetSummaryHeader(string titleHeader, bool showDuration = false)
{
    <tr>
        @if (titleHeader != null)
        {
            <th>@titleHeader</th>
        }
        <th colspan="2">Success rate</th>
        <th>Tests</th>
        <th>Succeeded</th>
        <th>Failed</th>
        <th>Pending</th>
        <th>Ignored</th>
        <th>Skipped</th>
        @if (showDuration)
        {
            <th>Duration</th>
        }
    </tr>
}
@helper GetSummaryRow(TestCollectionResultSummary summary, string title, string href, TimeSpan? executionDuration = null)
{
    <tr>
        @if (title != null)
        {
            <td><a href="#@href">@title</a></td>
        }
        @RenderTestExecutionSummaryRowTail(summary, executionDuration)
    </tr>
}

@helper RenderBar(TestNodeResultType testNodeResultType, int count, int total, Func<TestNodeResultType, string> titleFactory)
{
    <td>
        <a class="bar @("color" + testNodeResultType)" 
           style="width: @GetPixelBarWidth(total, count)px;" 
           title="@titleFactory(testNodeResultType)" 
           @if (testNodeResultType.GetGroup() == TestNodeResultTypeGroup.Failure)
           {
               @:href="#error_summary"
           }
        ></a>
    </td>
}

@helper RenderSummaryBars(IEnumerable<KeyValuePair<TestNodeResultType, int>> data, int total, Func<TestNodeResultType, string> titleFactory)
{
    <table class="timelineview" cellpadding="0" cellspacing="0">
        <tr>
            @foreach (var resultCount in data)
            {
                @RenderBar(resultCount.Key, resultCount.Value, total, titleFactory)
            }
        </tr>
    </table>
}

@helper RenderTotalSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
    @RenderSummaryRowTail(summary.Total, summary.ResultCounts, summary.TotalMessage, summary.GetText, executionDuration)
}

@helper RenderTestExecutionSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
    @RenderSummaryRowTail(summary.Total, summary.TestExecutionResultCounts, summary.TotalMessage, summary.GetText, executionDuration)
}

@helper RenderSummaryRowTail(int total, IDictionary<TestNodeResultType, int> resultCounts, string totalMessage, Func<TestNodeResultType, string> getText, TimeSpan? executionDuration = null)
{
    int succeeded = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Success)).Sum(rc => rc.Value);
    int failed = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Failure)).Sum(rc => rc.Value);
    int pending = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Pending)).Sum(rc => rc.Value);
    int ignored = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Ignored)).Sum(rc => rc.Value);
    int skipped = resultCounts[TestNodeResultType.Skipped];

    <td>
        @if (succeeded + failed + pending > 0)
        {
            @:@GetRoundedSuccessPercentage(succeeded, failed, pending)%
        }
        else
        {
            @:n/a
        }
    </td>
    <td>
        @RenderSummaryBars(GetOrderedBarChartData(resultCounts), total, getText)
    </td>
    <td>@totalMessage</td>
    <td>@succeeded</td>
    <td>@failed</td>
    <td>@pending</td>
    <td>@ignored</td>
    <td>@skipped</td>
    if (executionDuration != null)
    {
        <td>@executionDuration.Value</td>
    }
}

@helper TestItemLinks(TestItem testItem, int level)
{
    if (level == 0)
    {
        <a href="#@GetTestNodeAnchor(testItem, "t", 0)">@testItem.Type: @testItem.Title</a>
    }
    else
    {
        <a href="#@GetTestNodeAnchor(testItem, "t", 0)">@testItem.Title</a>
    }
    var tiResult = GetTestItemResult(testItem);
    if (tiResult != null)
    {
        foreach (var retry in tiResult.Executions.Skip(1))
        {
            <a href="#@GetTestNodeAnchor(testItem, "t", retry.TestItemExecutionIndex)">retry #@retry.TestItemExecutionIndex</a>
        }
    }
}
@helper TestNodeLinks(TestNode testNode, int level)
{
    if (testNode is TestItem)
    {
        @TestItemLinks((TestItem)testNode, level)
    }
    if (testNode is TestCollection)
    {
        <span>@testNode.Type: @testNode.Title</span>
        <ul class="subNodeLinks">
        @foreach (var subTestNode in ((TestCollection)testNode).SubNodes)
        {
            <li>
            @TestNodeLinks(subTestNode, level + 1)
            </li>
        }
        </ul>
    }
}
@functions
{
    double GetRoundedSuccessPercentage(int succeeded, int failed, int pending)
    {
        double absolute = succeeded + failed + pending;
        double percent = succeeded / absolute;
        double scaledRoundedPercent = Math.Round(percent * 100);
        return scaledRoundedPercent;
    }
    string GetFixtureTitle(TestNode fixtureNode)
    {
        return fixtureNode.IsDefaultTestTarget ? fixtureNode.Title : string.Format("{0} (target: {1})", fixtureNode.Title, fixtureNode.TestTarget);
    }

    TimeSpan CalculateDuration(TestNode testNode)
    {
        TimeSpan executionDuration = TimeSpan.Zero;

        var testNodeResults = Model.TestExecutionResults.Where(tr => tr.TestItemResult.TestNode == testNode);
        foreach (var testNodeResult in testNodeResults)
        {
            executionDuration += testNodeResult.ExecutionTime.Duration;
        }

        return executionDuration;
    }

    double GetPixelBarWidth(double total, double value)
    {
        return Math.Round((value * 200 / total) - 1);
    }

    IEnumerable<KeyValuePair<TestNodeResultType, int>> GetOrderedBarChartData(IEnumerable<KeyValuePair<TestNodeResultType, int>> source)
    {
        return source.Where(rc => rc.Value > 0).OrderByDescending(rc => rc.Key.GetGroup() == TestNodeResultTypeGroup.Success ? 1000 : (int)rc.Key);
    }
}

@section ProjectInformation
{
    <ul>
        <li>Project: @Model.Configuration.ProjectName</li>
        <li>Configuration: @Model.Configuration.Name</li>
        <li>Test Assemblies: @string.Join(", ", Model.Configuration.TestAssemblyPaths)</li>
        <li>Start Time: @Model.ExecutionTime.StartTime</li>
        <li>Duration: @Model.ExecutionTime.Duration</li>
        <li>Test Threads: @Model.TestThreads.Count</li>
        @if (Model.FrameworkError != null)
        {
            <li><div class="errorMessage">Execution framework error: @(Model.FrameworkError.ToString())</div></li>
        }
    </ul>
}

@section TestResultView
{
    <h2>Test Result View</h2>
    <div id="testview" class="viewbox">
        <div id="bar-control">
            <div id="bar-control-sort">
                <label>sort by:</label>
                <span class="option"><input type="radio" name="barSortOrder" value="exectime" />Time</span>
                <span class="option"><input type="radio" name="barSortOrder" value="acttime" />Act Time</span>
                <span class="option"><input type="radio" name="barSortOrder" value="order" />Execution</span>
                <span class="option"><input type="radio" name="barSortOrder" value="rescode" checked="checked" />Result</span>
                <span class="option"><input type="checkbox" name="barSortDesc" id="barSortDesc" checked="checked" />desc</span>
            </div>
            <div id="bar-control-heights">
                <label>heights:</label>
                <span class="option"><input type="radio" checked="checked" name="barHeight" value="exectime" />Time</span>
                <span class="option"><input type="radio" name="barHeight" value="acttime" />Act Time</span>
            </div>
        </div>
        <table class="vertical-scale" cellpadding="0" cellspacing="0">
            <tr class="scale-max">
                <td class="left-padding scale-max-label">&nbsp;</td>
                <td colspan="@Model.TestExecutionResults.Count()">&nbsp;</td>
                <td class="right-padding">&nbsp;</td>
            </tr>
            <tr class="scale-mid">
                <td class="left-padding scale-mid-label">&nbsp;</td>
                <td colspan="@Model.TestExecutionResults.Count()">&nbsp;</td>
                <td class="right-padding">&nbsp;</td>
            </tr>
            <tr class="scale-min">
                <td class="left-padding scale-min-label">&nbsp;</td>
                <td colspan="@Model.TestExecutionResults.Count()">&nbsp;</td>
                <td class="right-padding">&nbsp;</td>
            </tr>
        </table>
        <div class="scrollable">
            <table class="testview-items" cellpadding="0" cellspacing="0">
                <tr class="testview-items-row">
                    <td class="left-padding">&nbsp;</td>
                    @foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ResultType))
                    {
                        @GetReportBar(test);
                    }
                    <td class="right-padding">&nbsp;</td>
                </tr>
                <tr class="horizontal-scale">
                    <td class="left-padding">&nbsp;</td>
                    <td colspan="10">&nbsp;</td>
                    @for (int test10Index = 1; test10Index < Model.TestExecutionResults.Count() / 10; test10Index++)
                    {
                        <td class="scale-10-label" colspan="10">@(test10Index * 10)</td>
                    }
                </tr>
            </table>
        </div>
    </div>
}
@section FeatureSummary
{
    <h2>Feature Summary</h2>
    <table class="testEvents">
        @GetSummaryHeader("Feature", true)

        @foreach (var fixtureNode in GetTextFixtures())
        {
            var fixtureSummary = GetSummary(fixtureNode);
            string fixtureTitle = GetFixtureTitle(fixtureNode);
            string testNodeAnchor = GetTestNodeAnchor(fixtureNode, "f");

            var executionDuration = fixtureNode.SubNodes.Aggregate(TimeSpan.Zero, (acc, testNode) => acc + CalculateDuration(testNode));

            <tr>
                <td><a href="#@testNodeAnchor">@fixtureTitle</a></td>
                @RenderTestExecutionSummaryRowTail(fixtureSummary, executionDuration)
            </tr>
        }
    </table>
}
<!DOCTYPE html>
<html>
	<head>
        <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
		<title>@Model.Configuration.ProjectName Test Execution Report</title>
        <script type="text/javascript" src="http://code.jquery.com/jquery-1.6.2.min.js"></script>
        <script type="text/javascript">
            /**
            * jQuery.fn.sortElements
            * --------------
            * #author James Padolsey (http://james.padolsey.com)
            * #version 0.11
            * #updated 18-MAR-2010
            * #url https://raw.github.com/jamespadolsey/jQuery-Plugins/master/sortElements/jquery.sortElements.js
            * --------------
            * #param Function comparator:
            *   Exactly the same behaviour as [1,2,3].sort(comparator)
            *   
            * #param Function getSortable
            *   A function that should return the element that is
            *   to be sorted. The comparator will run on the
            *   current collection, but you may want the actual
            *   resulting sort to occur on a parent or another
            *   associated element.
            *   
            *   E.g. $('td').sortElements(comparator, function(){
            *      return this.parentNode; 
            *   })
            *   
            *   The <td>'s parent (<tr>) will be sorted instead
            *   of the <td> itself.
            */
            jQuery.fn.sortElements = (function () {

                var sort = [].sort;

                return function (comparator, getSortable) {

                    getSortable = getSortable || function () { return this; };

                    var placements = this.map(function () {

                        var sortElement = getSortable.call(this),
                parentNode = sortElement.parentNode,

                        // Since the element itself will change position, we have
                        // to have some way of storing it's original position in
                        // the DOM. The easiest way is to have a 'flag' node:
                nextSibling = parentNode.insertBefore(
                    document.createTextNode(''),
                    sortElement.nextSibling
                );

                        return function () {

                            if (parentNode === this) {
                                throw new Error(
                        "You can't sort elements if any one is a descendant of another."
                    );
                            }

                            // Insert before flag:
                            parentNode.insertBefore(this, nextSibling);
                            // Remove flag:
                            parentNode.removeChild(nextSibling);

                        };

                    });

                    return sort.call(this, comparator).each(function (i) {
                        placements[i].call(getSortable.call(this));
                    });

                };

            })();
        </script>
        <script type="text/javascript">
            jQuery.fn.setBarSizes = (function () {
                return function (metricName, maxBarSize, min) {
                    var max = Math.max.apply(Math, $.makeArray($(this).map(function () { return Number($(this).attr('data-sr-' + metricName)); })));
                    var scale = 1.0;
                    while (max > 0.0 && max <= 10.0) {
                        scale = scale * 10.0;
                        max = max * 10.0;
                    }
                    max = (Math.ceil(max / 2) * 2) / scale;

                    this.each(function () {
                        var barAnchor = $(this).find('a');
                        var actual = $(this).attr('data-sr-' + metricName);
                        var newHeight = Math.max(Math.round(maxBarSize * (actual - min) / (max - min)), 2);
                        barAnchor.css({ height: newHeight });
                    });

                    var unit = "";
                    if (metricName.substr(metricName.length - 4, 4) === "time")
                        unit = "s";

                    $('#testview .scale-min-label').each(function () {
                        $(this).text(min.toString() + unit);
                    });
                    $('#testview .scale-max-label').each(function () {
                        $(this).text(max.toString() + unit);
                    });
                    var mid = max / 2;
                    $('#testview .scale-mid-label').each(function () {
                        $(this).text(mid.toString() + unit);
                    });
                };
            })();

            function getComparer(metricName, isDesc) {
                return function (a, b) {
                    var aNumber = Number($(a).attr('data-sr-' + metricName));
                    var bNumber = Number($(b).attr('data-sr-' + metricName));
                    var result = aNumber > bNumber ? 1 : (aNumber < bNumber ? -1 : 0);
                    if (isDesc)
                        result = -1 * result;

                    if (result == 0 && metricName != "order")
                        result = getComparer("order", false)(a, b);

                    return result;
                };
            }

            var currentSort = "";
            function doSort(allowToggleDesc) {
                var newSort = $("input[name='barSortOrder']:checked").val();
                if (allowToggleDesc && currentSort == newSort) {
                    $('#barSortDesc').click();
                    doSort(false);
                    return;
                }
                currentSort = newSort;
                $('#testview td.testview-item').sortElements(getComparer(newSort, $('#barSortDesc').is(':checked')));
            }


            function doSetHeights(allowSort) {
                var selectedMetric = $("input[name='barHeight']:checked").val();
                $('#testview td.testview-item').setBarSizes(selectedMetric, 60, 0.0);

                if (allowSort && currentSort != selectedMetric) {
                    var $radios = $("input[name='barSortOrder']");
                    $radios.filter('[value=' + selectedMetric + ']').attr('checked', true);
                    $("#barSortDesc").attr("checked", [true]);
                    doSort(false);
                }
            }

            $(document).ready(function () {
                $("input[name='barSortOrder']").click(function () { doSort(true); return true; });
                $("input[name='barSortDesc']").change(function () { doSort(false); });
                $("input[name='barHeight']").change(function () { doSetHeights(true); });

                doSort(false);
                doSetHeights(false);

                $("div.scrollable").css({ 'overflow': 'auto' });
            });
        </script>

        <style type="text/css">
            body 
            {
                color: #000000;
                font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;
                line-height: 130%;
            }
            h1 {
                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;
                font-size: 170%;
                font-weight: bold;
            }            
            h2 {
                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;
                font-size: 130%;
                font-weight: bold;
                margin-bottom: 5px;
            }            
            h3 {
                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;
                font-size: 120%;
                font-weight: bold;
                margin-bottom: 5px;
            }            
            a.bar
            {
                text-decoration: none;
                display: block;
                line-height: 1px;
            }
            .description
            {
                font-style: italic;
            }
            .log 
            {
                width: 600px;
                white-space: pre-wrap;
                display: block;
                margin: 0px;
            }
            .errorMessage 
            {
                width: 600px;
                color: Red;
                font-weight: bold;
            }
            .stackTrace 
            {
                width: 600px;
                white-space: pre-wrap;
                font-style: italic;
                color: Red;
                display: block;
            }
            table.testEvents
            {
                border: solid 1px #e8eef4;
                border-collapse: collapse;
            }
            table.testEvents td
            {
                vertical-align: top;
                padding: 5px;
                border: solid 1px #e8eef4;
            }
            table.testEvents th
            {
                padding: 6px 5px;
                text-align: left;
                background-color: #e8eef4;
                border: solid 1px #e8eef4;                
            }
            .comment
            {
                font-style: italic;
                font-size: smaller;
            }
            .startupBar
            {
                background-color: #EEEEEE;
                cursor: default;
            }
            
            .colorSucceeded
            {
                background-color: #90ED7B;
            }
            .colorIgnored
            {
                background-color: #FFFF85;
            }
            .colorPending
            {
                background-color: #D47BED;
            }
            .colorNothingToRun
            {
                background-color: #CCCCFF;
            }
            .colorSkipped
            {
                background-color: #CCCCFF;
            }
            .colorInconclusive
            {
                background-color: #7BEDED;
            }
            .colorCleanupFailed
            {
                background-color: #FFCCCC;
            }
            .colorRandomlyFailed
            {
                background-color: #EDB07B;
            }
            .colorFailed
            {
                background-color: #ED5F5F;
            }
            .colorInitializationFailed
            {
                background-color: #FF0000;
            }
            .colorFrameworkError
            {
                background-color: #FF0000;
            }
            ul.subNodeLinks
            {
                padding-left: 20px;
                margin: 0px;
            }
            ul.subNodeLinks li
            {
                list-style: none;
            }
            
            /* views general */
            div.scrollable
            {
                /*overflow: auto; - thsi has to be set from js, because of an IE9 bug */
            }
            div.viewbox
            {
                position: relative;
                border: 3px solid #e8eef4;
            }
            div.viewbox table
            {
                border: 0px;
            }
                        
            /* testview */
            #testview
            {
                padding-top: 23px;
            }
            
            table.testview-items td
            {
                vertical-align: bottom;
                padding: 0px 1px 0px 1px;
            }
            td.right-padding, td.left-padding
            {
                width: 25px;
                min-width: 25px;
            }
            table.testview-items a.bar
            {
                width: 5px;
            }
            table.testview-items tr.testview-items-row
            {
                height: 60px;
            }
            
            /* scale */
            table.vertical-scale 
            {
                position: absolute;
                top: 23px;
                left: 0px;
                width: 100%;
                z-index: -100;
            }
            table.vertical-scale td, tr.horizontal-scale td
            {
                font-size: 60%;
                line-height: normal;
            }
            table.vertical-scale tr.scale-max, table.vertical-scale tr.scale-mid 
            {
                height: 30px;
            }
            tr.horizontal-scale, table.vertical-scale tr.scale-min 
            {
                height: 12px;
            }
            
            td.scale-max-label, td.scale-mid-label, td.scale-min-label
            {
                border-top: solid 1px #E6E6E6;
                text-align: left;
                vertical-align: top;
            }
            td.scale-10-label
            {
                border-left: solid 1px #E6E6E6;
                text-align: left;
                vertical-align: bottom;
                padding-left: 1px;
            }
            tr.scale-mid td, tr.scale-min td, tr.scale-max td
            {
                border-top: solid 1px #E6E6E6;
            }
           
            
            /* bar-control */
            #bar-control
            {
                font-size: 60%;
                line-height: normal;
                position: absolute;
                right: 0px;
                top: 0px;
            }
            #bar-control label
            {
                font-weight: bold;
                vertical-align: middle;
            }
            #bar-control .option
            {
                vertical-align: middle;
                text-transform: lowercase;
            }
            #bar-control input[type="checkbox"]
            {
                padding: 0 2px 0 3px;
            }
            #bar-control input
            {
                vertical-align: top;
                height: 12px;
                margin: 0px;
                padding: 0px;
            }
            #bar-control div
            {
                float: right;
                margin: 3px 5px 3px 5px;
            }

            /* timeline view */
            #timelineview
            {
                padding-top: 5px;
            }
            table.timelineview a
            {
                height: 20px;
            }
            table.timelineview td
            {
                vertical-align: bottom;
                padding: 0px 1px 0px 0px;
                border: 0px;
            }
            tr.thread-items-row
            {
                height: 25px;
            }
            tr.thread-items-row td
            {
                vertical-align: bottom;
            }
            td.thread-label
            {
                padding: 0px 6px 0px 6px;
                text-align: right;
                line-height: 18px;
                vertical-align: bottom;
            }
            th.thread-label
            {
                padding: 3px 6px 0px 6px;
                line-height: 18px;
                text-align: left;
                vertical-align: bottom;
            }
        </style>
	</head>
	<body>
        <h1>@Model.Configuration.ProjectName Test Execution Report</h1>
        @RenderSection("ProjectInformation")

        <h2>Result: @Model.Summary.ConcludedResultMessage</h2>
        <table class="testEvents">
            @GetSummaryHeader(null)
            @RenderTotalSummaryRowTail(Model.Summary)
        </table>
        
        <h2>Test Timeline Summary</h2>
        @{
            double msecPerPixel = Model.ExecutionTime.DurationMilliseconds / (Model.TestExecutionResults.Count() * 7);
            var secScale = Math.Max(1.0, Math.Round((msecPerPixel / 1000 * 70) / 2) * 2);
            var scaleItemCount = (int)Math.Floor(Model.ExecutionTime.DurationSeconds / secScale) + 1;
            var pixelScale = secScale * 1000 / msecPerPixel;
        }
        <div id="timelineview" class="viewbox">
            <div class="scrollable">
                <table cellpadding="0" cellspacing="0">
                    <tr>
                        <th class="thread-label" colspan="2">thread</th>
                    </tr>
                    @foreach (var testThread in Model.TestThreads)
                    {
                        <tr class="thread-items-row">
                            <td class="thread-label" title="Machine: @testThread.MachineName">#@testThread.ThreadId</td>
                            <td colspan="@scaleItemCount">
                                <table class="timelineview" cellpadding="0" cellspacing="0">
                                    <tr>
                                        @{
                        currentPixel = 0;
                                        }
                                        @GetTimelineBar(Model.ExecutionTime.StartTime, testThread.ExecutionTime.StartTime, msecPerPixel, null)
                                        @foreach (var test in Model.TestExecutionResults.Where(tr => tr.ThreadId == testThread.ThreadId).OrderBy(tr => tr.ExecutionOrder))
                                        {
                                            @GetTimelineBar(test.ExecutionTime.StartTime, test.ExecutionTime.EndTime, msecPerPixel, test)
                                        }
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    }
                    <tr class="horizontal-scale">
                        <td>&nbsp;</td>
                        @for (int scaleIndex = 0; scaleIndex < scaleItemCount - 1; scaleIndex++)
                        {
                            var width = (int)(Math.Round((scaleIndex + 1) * pixelScale) - Math.Round((scaleIndex) * pixelScale));
                            <td class="scale-10-label" style="width: @(width)px;min-width: @(width)px;">@Math.Round(secScale * scaleIndex)s</td>
                        }
                        <td class="scale-10-label">@Math.Round(secScale * (scaleItemCount - 1))s</td>
                    </tr>
                </table>
            </div>
        </div>

        @RenderSection("TestResultView")
        
        @RenderSection("FeatureSummary")

        <a name="error_summary" />
        <h2>Error Summary</h2>
        <table class="testEvents">
            @GetSummaryHeader("Test")
            @foreach (var testResult in Model.Tests.Where(tr => tr.Result.GetGroup() == TestNodeResultTypeGroup.Failure))
            {
                var testSummary = GetSummary(testResult.TestNode);
                <tr>
                    <td>
                        <a href="#@GetTestNodeAnchor(testResult.TestNode, "t", 0)">@GetTestTitle(testResult)</a>
                        @foreach (var retry in testResult.Executions.Skip(1))
                        {
                            <a href="#@GetTestAnchor(retry)">retry #@retry.TestItemExecutionIndex</a>
                        }
                    </td>
                    @RenderTestExecutionSummaryRowTail(testSummary)
                </tr>
                if (!string.IsNullOrEmpty(testResult.Error))
                {
                <tr>
                    <td colspan="9" style="padding-left: 20px;"><div class="errorMessage">Error: @(testResult.Error)</div></td>
                </tr>
                }
            }
        </table>

        <h2>Scenario Summary</h2>
        @foreach (var fixtureNode in GetTextFixtures())
        {
            <a name="@GetTestNodeAnchor(fixtureNode, "f")" />
            <h3>@fixtureNode.Type: @GetFixtureTitle(fixtureNode)</h3>
            if (!string.IsNullOrEmpty(fixtureNode.Description))
            {
                <div class="description"><pre>@fixtureNode.Description</pre>
                </div>
            }
            <table class="testEvents">
                @GetSummaryHeader("Test", true)
                @foreach (var testNode in fixtureNode.SubNodes)
                {
                    var testSummary = GetSummary(testNode);
                    <tr>
                        <td>
                            @TestNodeLinks(testNode, 0)
                        </td>
                        
                        @RenderTestExecutionSummaryRowTail(testSummary, CalculateDuration(testNode))
                        
                    </tr>
                }
            </table>
        }

        <h2>Execution Details</h2>
        @foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ExecutionOrder))
        {
            var testItem = test.TestItemResult.TestNode;
            <a name="@GetTestAnchor(test)" />
            <h3>@testItem.Type: @GetTestTitle(test)</h3>
            if (!string.IsNullOrEmpty(testItem.Description))
            {
                <div class="description">
                    <pre>@testItem.Description</pre>
                </div>
            }
            if (testItem.Tags.Any())
            {
                <div class="description">
                    tags: @string.Join(", ", testItem.Tags)
                </div>
            }
            <ul>
                <li>Status: @test.ResultType</li>
                <li>Start time: @test.ExecutionTime.StartTime</li>
                <li>Execution time (sec): @test.ExecutionTime.DurationSeconds</li>
                <li>Thread: #@test.ThreadId</li>
                @if (!string.IsNullOrEmpty(test.Result.Error))
                {
                <li>Error: @(test.Result.Error)</li>
                }
            </ul>
            
            <table class="testEvents">
                <tr>
                    <th>Steps</th>
                    <th>Trace</th>
                    <th>Result</th>
                </tr>
                @foreach (var traceEvent in test.Result.TraceEvents)
                {
	                if (!IsRelevant(traceEvent))
	                {
		                continue;
	                }
	                var relatedNode = GetTestNode(traceEvent);
                    <tr>
                        <td>
                            <pre class="log">@(GetBusinessMessages(traceEvent))</pre>
                        </td>
                        <td>
                            <!-- [@traceEvent.Type: @relatedNode.Type - @relatedNode.Title] -->
                            <pre class="log">@Raw(FormatTechMessages(traceEvent.TechMessages.TrimEnd()))</pre>
                            @if (!string.IsNullOrEmpty(traceEvent.Error))
                            {
                                <div class="errorMessage">@Raw(FormatTechMessages(traceEvent.Error))</div>
                                <pre class="stackTrace">@Raw(FormatTechMessages(traceEvent.StackTrace.TrimEnd()))</pre>
                            }
                        </td>
                        <td>@traceEvent.ResultType in @GetSeconds(Math.Round(traceEvent.Duration.TotalSeconds, 3))s</td>
                    </tr>
                }
            </table>
        }
	</body>
</html>
------------- END -----------

The generated source code is: 
------------- START -----------
//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompiledRazorTemplates.Dynamic {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Globalization;
    using TechTalk.SpecRun.Framework;
    using TechTalk.SpecRun.Framework.Results;
    using TechTalk.SpecRun.Framework.TestSuiteStructure;
    
    
    public class RazorEngine_2c571914b1944b83b48e161f3951a320 : SpecFlow.Plus.Runner.Reporting.CustomTemplateBase<TestRunResult> {
        


#line default

public RazorEngine.Templating.TemplateWriter GetReportBar(TestItemExecutionResult test)
    {
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
     

WriteLiteralTo(__razor_helper_writer, "    <td");

WriteLiteralTo(__razor_helper_writer, " class=\"testview-item\"");

WriteLiteralTo(__razor_helper_writer, " \r\n        data-sr-exectime=\"");

WriteTo(__razor_helper_writer, GetSeconds(test.ExecutionTime));

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, " data-sr-rescode=\"");

                                               WriteTo(__razor_helper_writer, (int)test.ResultType);

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, " data-sr-order=\"");

                                                                                      WriteTo(__razor_helper_writer, test.ExecutionOrder);

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, " data-sr-acttime=\"");

                                                                                                                             WriteTo(__razor_helper_writer, GetSeconds(test.ActExecutionTime));

WriteLiteralTo(__razor_helper_writer, "\"");

WriteLiteralTo(__razor_helper_writer, ">\r\n        <a\r\n            class=\"bar ");

WriteTo(__razor_helper_writer, "color" + test.ResultType);

WriteLiteralTo(__razor_helper_writer, "\" \r\n            style=\"height: ");

WriteTo(__razor_helper_writer, GetBarSize(tr => tr.ExecutionTime.DurationMilliseconds, test, 0.0, 60));

WriteLiteralTo(__razor_helper_writer, "px;\"\r\n            title=\"");

WriteTo(__razor_helper_writer, GetTestBarTooltip(test));

WriteLiteralTo(__razor_helper_writer, "\"\r\n            href=\"#");

WriteTo(__razor_helper_writer, GetTestAnchor(test));

WriteLiteralTo(__razor_helper_writer, "\">&nbsp;</a>\r\n    </td>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter GetTimelineBar(DateTime startTime, DateTime endTime, double msecPerPixel, TestItemExecutionResult test)
    {
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
     
    int endPixel = Math.Max((int)Math.Round((endTime - Model.ExecutionTime.StartTime).TotalMilliseconds / msecPerPixel), currentPixel + 4);
    int size = endPixel - currentPixel;
    currentPixel = endPixel;

WriteLiteralTo(__razor_helper_writer, "    <td>\r\n        <a\r\n            class=\"bar ");

WriteTo(__razor_helper_writer, test == null ? "startupBar" : "color" + test.ResultType.ToString());

WriteLiteralTo(__razor_helper_writer, "\" \r\n            style=\"width: ");

WriteTo(__razor_helper_writer, size - 1);

WriteLiteralTo(__razor_helper_writer, "px;\" \r\n");

            
             if (test != null)
            {

WriteLiteralTo(__razor_helper_writer, "                ");

WriteLiteralTo(__razor_helper_writer, "title=\"");

WriteTo(__razor_helper_writer, GetTestBarTooltip(test));

WriteLiteralTo(__razor_helper_writer, "\" \r\n");

WriteLiteralTo(__razor_helper_writer, "                ");

WriteLiteralTo(__razor_helper_writer, "href=\"#");

WriteTo(__razor_helper_writer, GetTestAnchor(test));

WriteLiteralTo(__razor_helper_writer, "\"\r\n");

            }
            else
            {

WriteLiteralTo(__razor_helper_writer, "                ");

WriteLiteralTo(__razor_helper_writer, "title=\"test thread startup\" \r\n");

            }

WriteLiteralTo(__razor_helper_writer, "        >&nbsp;</a>\r\n    </td>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter GetSummaryHeader(string titleHeader, bool showDuration = false)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <tr>\r\n");

        
         if (titleHeader != null)
        {

WriteLiteralTo(__razor_helper_writer, "            <th>");

WriteTo(__razor_helper_writer, titleHeader);

WriteLiteralTo(__razor_helper_writer, "</th>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "        <th");

WriteLiteralTo(__razor_helper_writer, " colspan=\"2\"");

WriteLiteralTo(__razor_helper_writer, ">Success rate</th>\r\n        <th>Tests</th>\r\n        <th>Succeeded</th>\r\n        <" +
"th>Failed</th>\r\n        <th>Pending</th>\r\n        <th>Ignored</th>\r\n        <th>" +
"Skipped</th>\r\n");

        
         if (showDuration)
        {

WriteLiteralTo(__razor_helper_writer, "            <th>Duration</th>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "    </tr>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter GetSummaryRow(TestCollectionResultSummary summary, string title, string href, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <tr>\r\n");

        
         if (title != null)
        {

WriteLiteralTo(__razor_helper_writer, "            <td><a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 2330), Tuple.Create("\"", 2343)
, Tuple.Create(Tuple.Create("", 2337), Tuple.Create("#", 2337), true)
, Tuple.Create(Tuple.Create("", 2338), Tuple.Create<System.Object, System.Int32>(href
, 2338), false)
);

WriteLiteralTo(__razor_helper_writer, ">");

   WriteTo(__razor_helper_writer, title);

WriteLiteralTo(__razor_helper_writer, "</a></td>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "        ");

WriteTo(__razor_helper_writer, RenderTestExecutionSummaryRowTail(summary, executionDuration));

WriteLiteralTo(__razor_helper_writer, "\r\n    </tr>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderBar(TestNodeResultType testNodeResultType, int count, int total, Func<TestNodeResultType, string> titleFactory)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <td>\r\n        <a");

WriteAttributeTo(__razor_helper_writer, "class", Tuple.Create(" class=\"", 2611), Tuple.Create("\"", 2654)
, Tuple.Create(Tuple.Create("", 2619), Tuple.Create("bar", 2619), true)
, Tuple.Create(Tuple.Create(" ", 2622), Tuple.Create<System.Object, System.Int32>("color" + testNodeResultType
, 2623), false)
);

WriteAttributeTo(__razor_helper_writer, "style", Tuple.Create(" \r\n           style=\"", 2655), Tuple.Create("\"", 2717)
, Tuple.Create(Tuple.Create("", 2676), Tuple.Create("width:", 2676), true)
, Tuple.Create(Tuple.Create(" ", 2682), Tuple.Create<System.Object, System.Int32>(GetPixelBarWidth(total, count)
, 2683), false)
, Tuple.Create(Tuple.Create("", 2714), Tuple.Create("px;", 2714), true)
);

WriteAttributeTo(__razor_helper_writer, "title", Tuple.Create(" \r\n           title=\"", 2718), Tuple.Create("\"", 2772)
, Tuple.Create(Tuple.Create("", 2739), Tuple.Create<System.Object, System.Int32>(titleFactory(testNodeResultType)
, 2739), false)
);

WriteLiteralTo(__razor_helper_writer, " \r\n           ");

            if (testNodeResultType.GetGroup() == TestNodeResultTypeGroup.Failure)
           {

WriteLiteralTo(__razor_helper_writer, "               ");

WriteLiteralTo(__razor_helper_writer, "href=\"#error_summary\"\r\n");

           }

WriteLiteralTo(__razor_helper_writer, "        ></a>\r\n    </td>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderSummaryBars(IEnumerable<KeyValuePair<TestNodeResultType, int>> data, int total, Func<TestNodeResultType, string> titleFactory)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 

WriteLiteralTo(__razor_helper_writer, "    <table");

WriteLiteralTo(__razor_helper_writer, " class=\"timelineview\"");

WriteLiteralTo(__razor_helper_writer, " cellpadding=\"0\"");

WriteLiteralTo(__razor_helper_writer, " cellspacing=\"0\"");

WriteLiteralTo(__razor_helper_writer, ">\r\n        <tr>\r\n");

            
             foreach (var resultCount in data)
            {
                
WriteTo(__razor_helper_writer, RenderBar(resultCount.Key, resultCount.Value, total, titleFactory));

                                                                                   
            }

WriteLiteralTo(__razor_helper_writer, "        </tr>\r\n    </table>\r\n");


});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderTotalSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    
WriteTo(__razor_helper_writer, RenderSummaryRowTail(summary.Total, summary.ResultCounts, summary.TotalMessage, summary.GetText, executionDuration));

                                                                                                                        

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderTestExecutionSummaryRowTail(TestCollectionResultSummary summary, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    
WriteTo(__razor_helper_writer, RenderSummaryRowTail(summary.Total, summary.TestExecutionResultCounts, summary.TotalMessage, summary.GetText, executionDuration));

                                                                                                                                     

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter RenderSummaryRowTail(int total, IDictionary<TestNodeResultType, int> resultCounts, string totalMessage, Func<TestNodeResultType, string> getText, TimeSpan? executionDuration = null)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    int succeeded = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Success)).Sum(rc => rc.Value);
    int failed = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Failure)).Sum(rc => rc.Value);
    int pending = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Pending)).Sum(rc => rc.Value);
    int ignored = resultCounts.Where(rc => rc.Key.IsInGroup(TestNodeResultTypeGroup.Ignored)).Sum(rc => rc.Value);
    int skipped = resultCounts[TestNodeResultType.Skipped];


WriteLiteralTo(__razor_helper_writer, "    <td>\r\n");

        
         if (succeeded + failed + pending > 0)
        {

WriteLiteralTo(__razor_helper_writer, "            ");

WriteTo(__razor_helper_writer, GetRoundedSuccessPercentage(succeeded, failed, pending));

WriteLiteralTo(__razor_helper_writer, "%\r\n");

        }
        else
        {

WriteLiteralTo(__razor_helper_writer, "            ");

WriteLiteralTo(__razor_helper_writer, "n/a\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "    </td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>\r\n");

WriteLiteralTo(__razor_helper_writer, "        ");

WriteTo(__razor_helper_writer, RenderSummaryBars(GetOrderedBarChartData(resultCounts), total, getText));

WriteLiteralTo(__razor_helper_writer, "\r\n    </td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, totalMessage);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, succeeded);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, failed);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, pending);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, ignored);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

WriteLiteralTo(__razor_helper_writer, "    <td>");

WriteTo(__razor_helper_writer, skipped);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

    if (executionDuration != null)
    {

WriteLiteralTo(__razor_helper_writer, "        <td>");

WriteTo(__razor_helper_writer, executionDuration.Value);

WriteLiteralTo(__razor_helper_writer, "</td>\r\n");

    }

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter TestItemLinks(TestItem testItem, int level)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    if (level == 0)
    {

WriteLiteralTo(__razor_helper_writer, "        <a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 5257), Tuple.Create("\"", 5301)
, Tuple.Create(Tuple.Create("", 5264), Tuple.Create("#", 5264), true)
, Tuple.Create(Tuple.Create("", 5265), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testItem, "t", 0)
, 5265), false)
);

WriteLiteralTo(__razor_helper_writer, ">");

                          WriteTo(__razor_helper_writer, testItem.Type);

WriteLiteralTo(__razor_helper_writer, ": ");

                                          WriteTo(__razor_helper_writer, testItem.Title);

WriteLiteralTo(__razor_helper_writer, "</a>\r\n");

    }
    else
    {

WriteLiteralTo(__razor_helper_writer, "        <a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 5374), Tuple.Create("\"", 5418)
, Tuple.Create(Tuple.Create("", 5381), Tuple.Create("#", 5381), true)
, Tuple.Create(Tuple.Create("", 5382), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testItem, "t", 0)
, 5382), false)
);

WriteLiteralTo(__razor_helper_writer, ">");

                          WriteTo(__razor_helper_writer, testItem.Title);

WriteLiteralTo(__razor_helper_writer, "</a>\r\n");

    }
    var tiResult = GetTestItemResult(testItem);
    if (tiResult != null)
    {
        foreach (var retry in tiResult.Executions.Skip(1))
        {

WriteLiteralTo(__razor_helper_writer, "            <a");

WriteAttributeTo(__razor_helper_writer, "href", Tuple.Create(" href=\"", 5616), Tuple.Create("\"", 5687)
, Tuple.Create(Tuple.Create("", 5623), Tuple.Create("#", 5623), true)
, Tuple.Create(Tuple.Create("", 5624), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testItem, "t", retry.TestItemExecutionIndex)
, 5624), false)
);

WriteLiteralTo(__razor_helper_writer, ">retry #");

                                                                WriteTo(__razor_helper_writer, retry.TestItemExecutionIndex);

WriteLiteralTo(__razor_helper_writer, "</a>\r\n");

        }
    }

});

#line default

}
#line default



#line default

public RazorEngine.Templating.TemplateWriter TestNodeLinks(TestNode testNode, int level)
{
#line default

return new RazorEngine.Templating.TemplateWriter(__razor_helper_writer => {
 
    if (testNode is TestItem)
    {
        
WriteTo(__razor_helper_writer, TestItemLinks((TestItem)testNode, level));

                                                 
    }
    if (testNode is TestCollection)
    {

WriteLiteralTo(__razor_helper_writer, "        <span>");

WriteTo(__razor_helper_writer, testNode.Type);

WriteLiteralTo(__razor_helper_writer, ": ");

WriteTo(__razor_helper_writer, testNode.Title);

WriteLiteralTo(__razor_helper_writer, "</span>\r\n");

WriteLiteralTo(__razor_helper_writer, "        <ul");

WriteLiteralTo(__razor_helper_writer, " class=\"subNodeLinks\"");

WriteLiteralTo(__razor_helper_writer, ">\r\n");

        
         foreach (var subTestNode in ((TestCollection)testNode).SubNodes)
        {

WriteLiteralTo(__razor_helper_writer, "            <li>\r\n");

WriteLiteralTo(__razor_helper_writer, "            ");

WriteTo(__razor_helper_writer, TestNodeLinks(subTestNode, level + 1));

WriteLiteralTo(__razor_helper_writer, "\r\n            </li>\r\n");

        }

WriteLiteralTo(__razor_helper_writer, "        </ul>\r\n");

    }

});

#line default

}
#line default


 
    double GetRoundedSuccessPercentage(int succeeded, int failed, int pending)
    {
        double absolute = succeeded + failed + pending;
        double percent = succeeded / absolute;
        double scaledRoundedPercent = Math.Round(percent * 100);
        return scaledRoundedPercent;
    }
    string GetFixtureTitle(TestNode fixtureNode)
    {
        return fixtureNode.IsDefaultTestTarget ? fixtureNode.Title : string.Format("{0} (target: {1})", fixtureNode.Title, fixtureNode.TestTarget);
    }

    TimeSpan CalculateDuration(TestNode testNode)
    {
        TimeSpan executionDuration = TimeSpan.Zero;

        var testNodeResults = Model.TestExecutionResults.Where(tr => tr.TestItemResult.TestNode == testNode);
        foreach (var testNodeResult in testNodeResults)
        {
            executionDuration += testNodeResult.ExecutionTime.Duration;
        }

        return executionDuration;
    }

    double GetPixelBarWidth(double total, double value)
    {
        return Math.Round((value * 200 / total) - 1);
    }

    IEnumerable<KeyValuePair<TestNodeResultType, int>> GetOrderedBarChartData(IEnumerable<KeyValuePair<TestNodeResultType, int>> source)
    {
        return source.Where(rc => rc.Value > 0).OrderByDescending(rc => rc.Key.GetGroup() == TestNodeResultTypeGroup.Success ? 1000 : (int)rc.Key);
    }

        
        public RazorEngine_2c571914b1944b83b48e161f3951a320() {
        }
        
        public override void Execute() {
WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

WriteLiteral("\r\n");

DefineSection("ProjectInformation", () => {

WriteLiteral("\r\n    <ul>\r\n        <li>Project: ");

                Write(Model.Configuration.ProjectName);

WriteLiteral("</li>\r\n        <li>Configuration: ");

                      Write(Model.Configuration.Name);

WriteLiteral("</li>\r\n        <li>Test Assemblies: ");

                        Write(string.Join(", ", Model.Configuration.TestAssemblyPaths));

WriteLiteral("</li>\r\n        <li>Start Time: ");

                   Write(Model.ExecutionTime.StartTime);

WriteLiteral("</li>\r\n        <li>Duration: ");

                 Write(Model.ExecutionTime.Duration);

WriteLiteral("</li>\r\n        <li>Test Threads: ");

                     Write(Model.TestThreads.Count);

WriteLiteral("</li>\r\n");

        
         if (Model.FrameworkError != null)
        {

WriteLiteral("            <li><div");

WriteLiteral(" class=\"errorMessage\"");

WriteLiteral(">Execution framework error: ");

                                                                 Write(Model.FrameworkError.ToString());

WriteLiteral("</div></li>\r\n");

        }

WriteLiteral("    </ul>\r\n");

});

WriteLiteral("\r\n");

DefineSection("TestResultView", () => {

WriteLiteral("\r\n    <h2>Test Result View</h2>\r\n    <div");

WriteLiteral(" id=\"testview\"");

WriteLiteral(" class=\"viewbox\"");

WriteLiteral(">\r\n        <div");

WriteLiteral(" id=\"bar-control\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" id=\"bar-control-sort\"");

WriteLiteral(">\r\n                <label>sort by:</label>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"exectime\"");

WriteLiteral(" />Time</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"acttime\"");

WriteLiteral(" />Act Time</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"order\"");

WriteLiteral(" />Execution</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barSortOrder\"");

WriteLiteral(" value=\"rescode\"");

WriteLiteral(" checked=\"checked\"");

WriteLiteral(" />Result</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"checkbox\"");

WriteLiteral(" name=\"barSortDesc\"");

WriteLiteral(" id=\"barSortDesc\"");

WriteLiteral(" checked=\"checked\"");

WriteLiteral(" />desc</span>\r\n            </div>\r\n            <div");

WriteLiteral(" id=\"bar-control-heights\"");

WriteLiteral(">\r\n                <label>heights:</label>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" checked=\"checked\"");

WriteLiteral(" name=\"barHeight\"");

WriteLiteral(" value=\"exectime\"");

WriteLiteral(" />Time</span>\r\n                <span");

WriteLiteral(" class=\"option\"");

WriteLiteral("><input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" name=\"barHeight\"");

WriteLiteral(" value=\"acttime\"");

WriteLiteral(" />Act Time</span>\r\n            </div>\r\n        </div>\r\n        <table");

WriteLiteral(" class=\"vertical-scale\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n            <tr");

WriteLiteral(" class=\"scale-max\"");

WriteLiteral(">\r\n                <td");

WriteLiteral(" class=\"left-padding scale-max-label\"");

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 9639), Tuple.Create("\"", 9684)
, Tuple.Create(Tuple.Create("", 9649), Tuple.Create<System.Object, System.Int32>(Model.TestExecutionResults.Count()
, 9649), false)
);

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n            </tr>\r\n            <tr");

WriteLiteral(" class=\"scale-mid\"");

WriteLiteral(">\r\n                <td");

WriteLiteral(" class=\"left-padding scale-mid-label\"");

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 9898), Tuple.Create("\"", 9943)
, Tuple.Create(Tuple.Create("", 9908), Tuple.Create<System.Object, System.Int32>(Model.TestExecutionResults.Count()
, 9908), false)
);

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n            </tr>\r\n            <tr");

WriteLiteral(" class=\"scale-min\"");

WriteLiteral(">\r\n                <td");

WriteLiteral(" class=\"left-padding scale-min-label\"");

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 10157), Tuple.Create("\"", 10202)
, Tuple.Create(Tuple.Create("", 10167), Tuple.Create<System.Object, System.Int32>(Model.TestExecutionResults.Count()
, 10167), false)
);

WriteLiteral(">&nbsp;</td>\r\n                <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n            </tr>\r\n        </table>\r\n        <div");

WriteLiteral(" class=\"scrollable\"");

WriteLiteral(">\r\n            <table");

WriteLiteral(" class=\"testview-items\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n                <tr");

WriteLiteral(" class=\"testview-items-row\"");

WriteLiteral(">\r\n                    <td");

WriteLiteral(" class=\"left-padding\"");

WriteLiteral(">&nbsp;</td>\r\n");

                    
                     foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ResultType))
                    {
                        
                   Write(GetReportBar(test));

                                           ;
                    }

WriteLiteral("                    <td");

WriteLiteral(" class=\"right-padding\"");

WriteLiteral(">&nbsp;</td>\r\n                </tr>\r\n                <tr");

WriteLiteral(" class=\"horizontal-scale\"");

WriteLiteral(">\r\n                    <td");

WriteLiteral(" class=\"left-padding\"");

WriteLiteral(">&nbsp;</td>\r\n                    <td");

WriteLiteral(" colspan=\"10\"");

WriteLiteral(">&nbsp;</td>\r\n");

                    
                     for (int test10Index = 1; test10Index < Model.TestExecutionResults.Count() / 10; test10Index++)
                    {

WriteLiteral("                        <td");

WriteLiteral(" class=\"scale-10-label\"");

WriteLiteral(" colspan=\"10\"");

WriteLiteral(">");

                                                            Write(test10Index * 10);

WriteLiteral("</td>\r\n");

                    }

WriteLiteral("                </tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n");

});

DefineSection("FeatureSummary", () => {

WriteLiteral("\r\n    <h2>Feature Summary</h2>\r\n    <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("        ");

   Write(GetSummaryHeader("Feature", true));

WriteLiteral("\r\n\r\n");

        
         foreach (var fixtureNode in GetTextFixtures())
        {
            var fixtureSummary = GetSummary(fixtureNode);
            string fixtureTitle = GetFixtureTitle(fixtureNode);
            string testNodeAnchor = GetTestNodeAnchor(fixtureNode, "f");

            var executionDuration = fixtureNode.SubNodes.Aggregate(TimeSpan.Zero, (acc, testNode) => acc + CalculateDuration(testNode));


WriteLiteral("            <tr>\r\n                <td><a");

WriteAttribute("href", Tuple.Create(" href=\"", 11869), Tuple.Create("\"", 11892)
, Tuple.Create(Tuple.Create("", 11876), Tuple.Create("#", 11876), true)
, Tuple.Create(Tuple.Create("", 11877), Tuple.Create<System.Object, System.Int32>(testNodeAnchor
, 11877), false)
);

WriteLiteral(">");

                                          Write(fixtureTitle);

WriteLiteral("</a></td>\r\n");

WriteLiteral("                ");

           Write(RenderTestExecutionSummaryRowTail(fixtureSummary, executionDuration));

WriteLiteral("\r\n            </tr>\r\n");

        }

WriteLiteral("    </table>\r\n");

});

WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n        <meta");

WriteLiteral(" http-equiv=\"content-type\"");

WriteLiteral(" content=\"text/html; charset=UTF-8\"");

WriteLiteral(" />\r\n\t\t<title>");

          Write(Model.Configuration.ProjectName);

WriteLiteral(" Test Execution Report</title>\r\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"http://code.jquery.com/jquery-1.6.2.min.js\"");

WriteLiteral("></script>\r\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n            /**\r\n            * jQuery.fn.sortElements\r\n            * ---------" +
"-----\r\n            * #author James Padolsey (http://james.padolsey.com)\r\n       " +
"     * #version 0.11\r\n            * #updated 18-MAR-2010\r\n            * #url htt" +
"ps://raw.github.com/jamespadolsey/jQuery-Plugins/master/sortElements/jquery.sort" +
"Elements.js\r\n            * --------------\r\n            * #param Function compara" +
"tor:\r\n            *   Exactly the same behaviour as [1,2,3].sort(comparator)\r\n  " +
"          *   \r\n            * #param Function getSortable\r\n            *   A fun" +
"ction that should return the element that is\r\n            *   to be sorted. The " +
"comparator will run on the\r\n            *   current collection, but you may want" +
" the actual\r\n            *   resulting sort to occur on a parent or another\r\n   " +
"         *   associated element.\r\n            *   \r\n            *   E.g. $(\'td\')" +
".sortElements(comparator, function(){\r\n            *      return this.parentNode" +
"; \r\n            *   })\r\n            *   \r\n            *   The <td>\'s parent (<tr" +
">) will be sorted instead\r\n            *   of the <td> itself.\r\n            */\r\n" +
"            jQuery.fn.sortElements = (function () {\r\n\r\n                var sort " +
"= [].sort;\r\n\r\n                return function (comparator, getSortable) {\r\n\r\n   " +
"                 getSortable = getSortable || function () { return this; };\r\n\r\n " +
"                   var placements = this.map(function () {\r\n\r\n                  " +
"      var sortElement = getSortable.call(this),\r\n                parentNode = so" +
"rtElement.parentNode,\r\n\r\n                        // Since the element itself wil" +
"l change position, we have\r\n                        // to have some way of stori" +
"ng it\'s original position in\r\n                        // the DOM. The easiest wa" +
"y is to have a \'flag\' node:\r\n                nextSibling = parentNode.insertBefo" +
"re(\r\n                    document.createTextNode(\'\'),\r\n                    sortE" +
"lement.nextSibling\r\n                );\r\n\r\n                        return functio" +
"n () {\r\n\r\n                            if (parentNode === this) {\r\n              " +
"                  throw new Error(\r\n                        \"You can\'t sort elem" +
"ents if any one is a descendant of another.\"\r\n                    );\r\n          " +
"                  }\r\n\r\n                            // Insert before flag:\r\n     " +
"                       parentNode.insertBefore(this, nextSibling);\r\n            " +
"                // Remove flag:\r\n                            parentNode.removeCh" +
"ild(nextSibling);\r\n\r\n                        };\r\n\r\n                    });\r\n\r\n  " +
"                  return sort.call(this, comparator).each(function (i) {\r\n      " +
"                  placements[i].call(getSortable.call(this));\r\n                 " +
"   });\r\n\r\n                };\r\n\r\n            })();\r\n        </script>\r\n        <s" +
"cript");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n            jQuery.fn.setBarSizes = (function () {\r\n                return fun" +
"ction (metricName, maxBarSize, min) {\r\n                    var max = Math.max.ap" +
"ply(Math, $.makeArray($(this).map(function () { return Number($(this).attr(\'data" +
"-sr-\' + metricName)); })));\r\n                    var scale = 1.0;\r\n             " +
"       while (max > 0.0 && max <= 10.0) {\r\n                        scale = scale" +
" * 10.0;\r\n                        max = max * 10.0;\r\n                    }\r\n    " +
"                max = (Math.ceil(max / 2) * 2) / scale;\r\n\r\n                    t" +
"his.each(function () {\r\n                        var barAnchor = $(this).find(\'a\'" +
");\r\n                        var actual = $(this).attr(\'data-sr-\' + metricName);\r" +
"\n                        var newHeight = Math.max(Math.round(maxBarSize * (actua" +
"l - min) / (max - min)), 2);\r\n                        barAnchor.css({ height: ne" +
"wHeight });\r\n                    });\r\n\r\n                    var unit = \"\";\r\n    " +
"                if (metricName.substr(metricName.length - 4, 4) === \"time\")\r\n   " +
"                     unit = \"s\";\r\n\r\n                    $(\'#testview .scale-min-" +
"label\').each(function () {\r\n                        $(this).text(min.toString() " +
"+ unit);\r\n                    });\r\n                    $(\'#testview .scale-max-l" +
"abel\').each(function () {\r\n                        $(this).text(max.toString() +" +
" unit);\r\n                    });\r\n                    var mid = max / 2;\r\n      " +
"              $(\'#testview .scale-mid-label\').each(function () {\r\n              " +
"          $(this).text(mid.toString() + unit);\r\n                    });\r\n       " +
"         };\r\n            })();\r\n\r\n            function getComparer(metricName, i" +
"sDesc) {\r\n                return function (a, b) {\r\n                    var aNum" +
"ber = Number($(a).attr(\'data-sr-\' + metricName));\r\n                    var bNumb" +
"er = Number($(b).attr(\'data-sr-\' + metricName));\r\n                    var result" +
" = aNumber > bNumber ? 1 : (aNumber < bNumber ? -1 : 0);\r\n                    if" +
" (isDesc)\r\n                        result = -1 * result;\r\n\r\n                    " +
"if (result == 0 && metricName != \"order\")\r\n                        result = getC" +
"omparer(\"order\", false)(a, b);\r\n\r\n                    return result;\r\n          " +
"      };\r\n            }\r\n\r\n            var currentSort = \"\";\r\n            functi" +
"on doSort(allowToggleDesc) {\r\n                var newSort = $(\"input[name=\'barSo" +
"rtOrder\']:checked\").val();\r\n                if (allowToggleDesc && currentSort =" +
"= newSort) {\r\n                    $(\'#barSortDesc\').click();\r\n                  " +
"  doSort(false);\r\n                    return;\r\n                }\r\n              " +
"  currentSort = newSort;\r\n                $(\'#testview td.testview-item\').sortEl" +
"ements(getComparer(newSort, $(\'#barSortDesc\').is(\':checked\')));\r\n            }\r\n" +
"\r\n\r\n            function doSetHeights(allowSort) {\r\n                var selected" +
"Metric = $(\"input[name=\'barHeight\']:checked\").val();\r\n                $(\'#testvi" +
"ew td.testview-item\').setBarSizes(selectedMetric, 60, 0.0);\r\n\r\n                i" +
"f (allowSort && currentSort != selectedMetric) {\r\n                    var $radio" +
"s = $(\"input[name=\'barSortOrder\']\");\r\n                    $radios.filter(\'[value" +
"=\' + selectedMetric + \']\').attr(\'checked\', true);\r\n                    $(\"#barSo" +
"rtDesc\").attr(\"checked\", [true]);\r\n                    doSort(false);\r\n         " +
"       }\r\n            }\r\n\r\n            $(document).ready(function () {\r\n        " +
"        $(\"input[name=\'barSortOrder\']\").click(function () { doSort(true); return" +
" true; });\r\n                $(\"input[name=\'barSortDesc\']\").change(function () { " +
"doSort(false); });\r\n                $(\"input[name=\'barHeight\']\").change(function" +
" () { doSetHeights(true); });\r\n\r\n                doSort(false);\r\n               " +
" doSetHeights(false);\r\n\r\n                $(\"div.scrollable\").css({ \'overflow\': \'" +
"auto\' });\r\n            });\r\n        </script>\r\n\r\n        <style");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(">\r\n            body \r\n            {\r\n                color: #000000;\r\n           " +
"     font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;\r\n               " +
" line-height: 130%;\r\n            }\r\n            h1 {\r\n                font-famil" +
"y: Trebuchet MS,Liberation Sans,DejaVu Sans,sans-serif;\r\n                font-si" +
"ze: 170%;\r\n                font-weight: bold;\r\n            }            \r\n      " +
"      h2 {\r\n                font-family: Trebuchet MS,Liberation Sans,DejaVu San" +
"s,sans-serif;\r\n                font-size: 130%;\r\n                font-weight: bo" +
"ld;\r\n                margin-bottom: 5px;\r\n            }            \r\n           " +
" h3 {\r\n                font-family: Trebuchet MS,Liberation Sans,DejaVu Sans,san" +
"s-serif;\r\n                font-size: 120%;\r\n                font-weight: bold;\r\n" +
"                margin-bottom: 5px;\r\n            }            \r\n            a.ba" +
"r\r\n            {\r\n                text-decoration: none;\r\n                displa" +
"y: block;\r\n                line-height: 1px;\r\n            }\r\n            .descri" +
"ption\r\n            {\r\n                font-style: italic;\r\n            }\r\n      " +
"      .log \r\n            {\r\n                width: 600px;\r\n                white" +
"-space: pre-wrap;\r\n                display: block;\r\n                margin: 0px;" +
"\r\n            }\r\n            .errorMessage \r\n            {\r\n                widt" +
"h: 600px;\r\n                color: Red;\r\n                font-weight: bold;\r\n    " +
"        }\r\n            .stackTrace \r\n            {\r\n                width: 600px" +
";\r\n                white-space: pre-wrap;\r\n                font-style: italic;\r\n" +
"                color: Red;\r\n                display: block;\r\n            }\r\n   " +
"         table.testEvents\r\n            {\r\n                border: solid 1px #e8e" +
"ef4;\r\n                border-collapse: collapse;\r\n            }\r\n            tab" +
"le.testEvents td\r\n            {\r\n                vertical-align: top;\r\n         " +
"       padding: 5px;\r\n                border: solid 1px #e8eef4;\r\n            }\r" +
"\n            table.testEvents th\r\n            {\r\n                padding: 6px 5p" +
"x;\r\n                text-align: left;\r\n                background-color: #e8eef4" +
";\r\n                border: solid 1px #e8eef4;                \r\n            }\r\n  " +
"          .comment\r\n            {\r\n                font-style: italic;\r\n        " +
"        font-size: smaller;\r\n            }\r\n            .startupBar\r\n           " +
" {\r\n                background-color: #EEEEEE;\r\n                cursor: default;" +
"\r\n            }\r\n            \r\n            .colorSucceeded\r\n            {\r\n     " +
"           background-color: #90ED7B;\r\n            }\r\n            .colorIgnored\r" +
"\n            {\r\n                background-color: #FFFF85;\r\n            }\r\n     " +
"       .colorPending\r\n            {\r\n                background-color: #D47BED;\r" +
"\n            }\r\n            .colorNothingToRun\r\n            {\r\n                b" +
"ackground-color: #CCCCFF;\r\n            }\r\n            .colorSkipped\r\n           " +
" {\r\n                background-color: #CCCCFF;\r\n            }\r\n            .colo" +
"rInconclusive\r\n            {\r\n                background-color: #7BEDED;\r\n      " +
"      }\r\n            .colorCleanupFailed\r\n            {\r\n                backgro" +
"und-color: #FFCCCC;\r\n            }\r\n            .colorRandomlyFailed\r\n          " +
"  {\r\n                background-color: #EDB07B;\r\n            }\r\n            .col" +
"orFailed\r\n            {\r\n                background-color: #ED5F5F;\r\n           " +
" }\r\n            .colorInitializationFailed\r\n            {\r\n                backg" +
"round-color: #FF0000;\r\n            }\r\n            .colorFrameworkError\r\n        " +
"    {\r\n                background-color: #FF0000;\r\n            }\r\n            ul" +
".subNodeLinks\r\n            {\r\n                padding-left: 20px;\r\n             " +
"   margin: 0px;\r\n            }\r\n            ul.subNodeLinks li\r\n            {\r\n " +
"               list-style: none;\r\n            }\r\n            \r\n            /* vi" +
"ews general */\r\n            div.scrollable\r\n            {\r\n                /*ove" +
"rflow: auto; - thsi has to be set from js, because of an IE9 bug */\r\n           " +
" }\r\n            div.viewbox\r\n            {\r\n                position: relative;\r" +
"\n                border: 3px solid #e8eef4;\r\n            }\r\n            div.view" +
"box table\r\n            {\r\n                border: 0px;\r\n            }\r\n         " +
"               \r\n            /* testview */\r\n            #testview\r\n            " +
"{\r\n                padding-top: 23px;\r\n            }\r\n            \r\n            " +
"table.testview-items td\r\n            {\r\n                vertical-align: bottom;\r" +
"\n                padding: 0px 1px 0px 1px;\r\n            }\r\n            td.right-" +
"padding, td.left-padding\r\n            {\r\n                width: 25px;\r\n         " +
"       min-width: 25px;\r\n            }\r\n            table.testview-items a.bar\r\n" +
"            {\r\n                width: 5px;\r\n            }\r\n            table.tes" +
"tview-items tr.testview-items-row\r\n            {\r\n                height: 60px;\r" +
"\n            }\r\n            \r\n            /* scale */\r\n            table.vertica" +
"l-scale \r\n            {\r\n                position: absolute;\r\n                to" +
"p: 23px;\r\n                left: 0px;\r\n                width: 100%;\r\n            " +
"    z-index: -100;\r\n            }\r\n            table.vertical-scale td, tr.horiz" +
"ontal-scale td\r\n            {\r\n                font-size: 60%;\r\n                " +
"line-height: normal;\r\n            }\r\n            table.vertical-scale tr.scale-m" +
"ax, table.vertical-scale tr.scale-mid \r\n            {\r\n                height: 3" +
"0px;\r\n            }\r\n            tr.horizontal-scale, table.vertical-scale tr.sc" +
"ale-min \r\n            {\r\n                height: 12px;\r\n            }\r\n         " +
"   \r\n            td.scale-max-label, td.scale-mid-label, td.scale-min-label\r\n   " +
"         {\r\n                border-top: solid 1px #E6E6E6;\r\n                text" +
"-align: left;\r\n                vertical-align: top;\r\n            }\r\n            " +
"td.scale-10-label\r\n            {\r\n                border-left: solid 1px #E6E6E6" +
";\r\n                text-align: left;\r\n                vertical-align: bottom;\r\n " +
"               padding-left: 1px;\r\n            }\r\n            tr.scale-mid td, t" +
"r.scale-min td, tr.scale-max td\r\n            {\r\n                border-top: soli" +
"d 1px #E6E6E6;\r\n            }\r\n           \r\n            \r\n            /* bar-con" +
"trol */\r\n            #bar-control\r\n            {\r\n                font-size: 60%" +
";\r\n                line-height: normal;\r\n                position: absolute;\r\n  " +
"              right: 0px;\r\n                top: 0px;\r\n            }\r\n           " +
" #bar-control label\r\n            {\r\n                font-weight: bold;\r\n        " +
"        vertical-align: middle;\r\n            }\r\n            #bar-control .option" +
"\r\n            {\r\n                vertical-align: middle;\r\n                text-t" +
"ransform: lowercase;\r\n            }\r\n            #bar-control input[type=\"checkb" +
"ox\"]\r\n            {\r\n                padding: 0 2px 0 3px;\r\n            }\r\n     " +
"       #bar-control input\r\n            {\r\n                vertical-align: top;\r\n" +
"                height: 12px;\r\n                margin: 0px;\r\n                pad" +
"ding: 0px;\r\n            }\r\n            #bar-control div\r\n            {\r\n        " +
"        float: right;\r\n                margin: 3px 5px 3px 5px;\r\n            }\r\n" +
"\r\n            /* timeline view */\r\n            #timelineview\r\n            {\r\n   " +
"             padding-top: 5px;\r\n            }\r\n            table.timelineview a\r" +
"\n            {\r\n                height: 20px;\r\n            }\r\n            table." +
"timelineview td\r\n            {\r\n                vertical-align: bottom;\r\n       " +
"         padding: 0px 1px 0px 0px;\r\n                border: 0px;\r\n            }\r" +
"\n            tr.thread-items-row\r\n            {\r\n                height: 25px;\r\n" +
"            }\r\n            tr.thread-items-row td\r\n            {\r\n              " +
"  vertical-align: bottom;\r\n            }\r\n            td.thread-label\r\n         " +
"   {\r\n                padding: 0px 6px 0px 6px;\r\n                text-align: rig" +
"ht;\r\n                line-height: 18px;\r\n                vertical-align: bottom;" +
"\r\n            }\r\n            th.thread-label\r\n            {\r\n                pad" +
"ding: 3px 6px 0px 6px;\r\n                line-height: 18px;\r\n                text" +
"-align: left;\r\n                vertical-align: bottom;\r\n            }\r\n        <" +
"/style>\r\n\t</head>\r\n\t<body>\r\n        <h1>");

       Write(Model.Configuration.ProjectName);

WriteLiteral(" Test Execution Report</h1>\r\n");

WriteLiteral("        ");

   Write(RenderSection("ProjectInformation"));

WriteLiteral("\r\n\r\n        <h2>Result: ");

               Write(Model.Summary.ConcludedResultMessage);

WriteLiteral("</h2>\r\n        <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("            ");

       Write(GetSummaryHeader(null));

WriteLiteral("\r\n");

WriteLiteral("            ");

       Write(RenderTotalSummaryRowTail(Model.Summary));

WriteLiteral("\r\n        </table>\r\n        \r\n        <h2>Test Timeline Summary</h2>\r\n");

        
          
            double msecPerPixel = Model.ExecutionTime.DurationMilliseconds / (Model.TestExecutionResults.Count() * 7);
            var secScale = Math.Max(1.0, Math.Round((msecPerPixel / 1000 * 70) / 2) * 2);
            var scaleItemCount = (int)Math.Floor(Model.ExecutionTime.DurationSeconds / secScale) + 1;
            var pixelScale = secScale * 1000 / msecPerPixel;
        
WriteLiteral("\r\n        <div");

WriteLiteral(" id=\"timelineview\"");

WriteLiteral(" class=\"viewbox\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"scrollable\"");

WriteLiteral(">\r\n                <table");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n                    <tr>\r\n                        <th");

WriteLiteral(" class=\"thread-label\"");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(">thread</th>\r\n                    </tr>\r\n");

                    
                     foreach (var testThread in Model.TestThreads)
                    {

WriteLiteral("                        <tr");

WriteLiteral(" class=\"thread-items-row\"");

WriteLiteral(">\r\n                            <td");

WriteLiteral(" class=\"thread-label\"");

WriteAttribute("title", Tuple.Create(" title=\"", 28722), Tuple.Create("\"", 28762)
, Tuple.Create(Tuple.Create("", 28730), Tuple.Create("Machine:", 28730), true)
, Tuple.Create(Tuple.Create(" ", 28738), Tuple.Create<System.Object, System.Int32>(testThread.MachineName
, 28739), false)
);

WriteLiteral(">#");

                                                                                          Write(testThread.ThreadId);

WriteLiteral("</td>\r\n                            <td");

WriteAttribute("colspan", Tuple.Create(" colspan=\"", 28823), Tuple.Create("\"", 28848)
, Tuple.Create(Tuple.Create("", 28833), Tuple.Create<System.Object, System.Int32>(scaleItemCount
, 28833), false)
);

WriteLiteral(">\r\n                                <table");

WriteLiteral(" class=\"timelineview\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\r\n                                    <tr>\r\n");

                                        
                                          
                        currentPixel = 0;
                                        
WriteLiteral("\r\n");

WriteLiteral("                                        ");

                                   Write(GetTimelineBar(Model.ExecutionTime.StartTime, testThread.ExecutionTime.StartTime, msecPerPixel, null));

WriteLiteral("\r\n");

                                        
                                         foreach (var test in Model.TestExecutionResults.Where(tr => tr.ThreadId == testThread.ThreadId).OrderBy(tr => tr.ExecutionOrder))
                                        {
                                            
                                       Write(GetTimelineBar(test.ExecutionTime.StartTime, test.ExecutionTime.EndTime, msecPerPixel, test));

                                                                                                                                         
                                        }

WriteLiteral("                                    </tr>\r\n                                </tabl" +
"e>\r\n                            </td>\r\n                        </tr>\r\n");

                    }

WriteLiteral("                    <tr");

WriteLiteral(" class=\"horizontal-scale\"");

WriteLiteral(">\r\n                        <td>&nbsp;</td>\r\n");

                        
                         for (int scaleIndex = 0; scaleIndex < scaleItemCount - 1; scaleIndex++)
                        {
                            var width = (int)(Math.Round((scaleIndex + 1) * pixelScale) - Math.Round((scaleIndex) * pixelScale));

WriteLiteral("                            <td");

WriteLiteral(" class=\"scale-10-label\"");

WriteAttribute("style", Tuple.Create(" style=\"", 30235), Tuple.Create("\"", 30283)
, Tuple.Create(Tuple.Create("", 30243), Tuple.Create("width:", 30243), true)
, Tuple.Create(Tuple.Create(" ", 30249), Tuple.Create<System.Object, System.Int32>(width
, 30250), false)
, Tuple.Create(Tuple.Create("", 30258), Tuple.Create("px;min-width:", 30258), true)
          , Tuple.Create(Tuple.Create(" ", 30271), Tuple.Create<System.Object, System.Int32>(width
, 30272), false)
, Tuple.Create(Tuple.Create("", 30280), Tuple.Create("px;", 30280), true)
);

WriteLiteral(">");

                                                                                                   Write(Math.Round(secScale * scaleIndex));

WriteLiteral("s</td>\r\n");

                        }

WriteLiteral("                        <td");

WriteLiteral(" class=\"scale-10-label\"");

WriteLiteral(">");

                                              Write(Math.Round(secScale * (scaleItemCount - 1)));

WriteLiteral("s</td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n" +
"        </div>\r\n\r\n");

WriteLiteral("        ");

   Write(RenderSection("TestResultView"));

WriteLiteral("\r\n        \r\n");

WriteLiteral("        ");

   Write(RenderSection("FeatureSummary"));

WriteLiteral("\r\n\r\n        <a");

WriteLiteral(" name=\"error_summary\"");

WriteLiteral(" />\r\n        <h2>Error Summary</h2>\r\n        <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("            ");

       Write(GetSummaryHeader("Test"));

WriteLiteral("\r\n");

            
             foreach (var testResult in Model.Tests.Where(tr => tr.Result.GetGroup() == TestNodeResultTypeGroup.Failure))
            {
                var testSummary = GetSummary(testResult.TestNode);

WriteLiteral("                <tr>\r\n                    <td>\r\n                        <a");

WriteAttribute("href", Tuple.Create(" href=\"", 31067), Tuple.Create("\"", 31122)
, Tuple.Create(Tuple.Create("", 31074), Tuple.Create("#", 31074), true)
, Tuple.Create(Tuple.Create("", 31075), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(testResult.TestNode, "t", 0)
, 31075), false)
);

WriteLiteral(">");

                                                                              Write(GetTestTitle(testResult));

WriteLiteral("</a>\r\n");

                        
                         foreach (var retry in testResult.Executions.Skip(1))
                        {

WriteLiteral("                            <a");

WriteAttribute("href", Tuple.Create(" href=\"", 31291), Tuple.Create("\"", 31320)
, Tuple.Create(Tuple.Create("", 31298), Tuple.Create("#", 31298), true)
, Tuple.Create(Tuple.Create("", 31299), Tuple.Create<System.Object, System.Int32>(GetTestAnchor(retry)
, 31299), false)
);

WriteLiteral(">retry #");

                                                               Write(retry.TestItemExecutionIndex);

WriteLiteral("</a>\r\n");

                        }

WriteLiteral("                    </td>\r\n");

WriteLiteral("                    ");

               Write(RenderTestExecutionSummaryRowTail(testSummary));

WriteLiteral("\r\n                </tr>\r\n");

                if (!string.IsNullOrEmpty(testResult.Error))
                {

WriteLiteral("                <tr>\r\n                    <td");

WriteLiteral(" colspan=\"9\"");

WriteLiteral(" style=\"padding-left: 20px;\"");

WriteLiteral("><div");

WriteLiteral(" class=\"errorMessage\"");

WriteLiteral(">Error: ");

                                                                                             Write(testResult.Error);

WriteLiteral("</div></td>\r\n                </tr>\r\n");

                }
            }

WriteLiteral("        </table>\r\n\r\n        <h2>Scenario Summary</h2>\r\n");

        
         foreach (var fixtureNode in GetTextFixtures())
        {

WriteLiteral("            <a");

WriteAttribute("name", Tuple.Create(" name=\"", 31936), Tuple.Create("\"", 31979)
, Tuple.Create(Tuple.Create("", 31943), Tuple.Create<System.Object, System.Int32>(GetTestNodeAnchor(fixtureNode, "f")
, 31943), false)
);

WriteLiteral(" />\r\n");

WriteLiteral("            <h3>");

           Write(fixtureNode.Type);

WriteLiteral(": ");

                              Write(GetFixtureTitle(fixtureNode));

WriteLiteral("</h3>\r\n");

            if (!string.IsNullOrEmpty(fixtureNode.Description))
            {

WriteLiteral("                <div");

WriteLiteral(" class=\"description\"");

WriteLiteral("><pre>");

                                         Write(fixtureNode.Description);

WriteLiteral("</pre>\r\n                </div>\r\n");

            }

WriteLiteral("            <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n");

WriteLiteral("                ");

           Write(GetSummaryHeader("Test", true));

WriteLiteral("\r\n");

                
                 foreach (var testNode in fixtureNode.SubNodes)
                {
                    var testSummary = GetSummary(testNode);

WriteLiteral("                    <tr>\r\n                        <td>\r\n");

WriteLiteral("                            ");

                       Write(TestNodeLinks(testNode, 0));

WriteLiteral("\r\n                        </td>\r\n                        \r\n");

WriteLiteral("                        ");

                   Write(RenderTestExecutionSummaryRowTail(testSummary, CalculateDuration(testNode)));

WriteLiteral("\r\n                        \r\n                    </tr>\r\n");

                }

WriteLiteral("            </table>\r\n");

        }

WriteLiteral("\r\n        <h2>Execution Details</h2>\r\n");

        
         foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ExecutionOrder))
        {
            var testItem = test.TestItemResult.TestNode;

WriteLiteral("            <a");

WriteAttribute("name", Tuple.Create(" name=\"", 33077), Tuple.Create("\"", 33104)
, Tuple.Create(Tuple.Create("", 33084), Tuple.Create<System.Object, System.Int32>(GetTestAnchor(test)
, 33084), false)
);

WriteLiteral(" />\r\n");

WriteLiteral("            <h3>");

           Write(testItem.Type);

WriteLiteral(": ");

                           Write(GetTestTitle(test));

WriteLiteral("</h3>\r\n");

            if (!string.IsNullOrEmpty(testItem.Description))
            {

WriteLiteral("                <div");

WriteLiteral(" class=\"description\"");

WriteLiteral(">\r\n                    <pre>");

                    Write(testItem.Description);

WriteLiteral("</pre>\r\n                </div>\r\n");

            }
            if (testItem.Tags.Any())
            {

WriteLiteral("                <div");

WriteLiteral(" class=\"description\"");

WriteLiteral(">\r\n                    tags: ");

                     Write(string.Join(", ", testItem.Tags));

WriteLiteral("\r\n                </div>\r\n");

            }

WriteLiteral("            <ul>\r\n                <li>Status: ");

                       Write(test.ResultType);

WriteLiteral("</li>\r\n                <li>Start time: ");

                           Write(test.ExecutionTime.StartTime);

WriteLiteral("</li>\r\n                <li>Execution time (sec): ");

                                     Write(test.ExecutionTime.DurationSeconds);

WriteLiteral("</li>\r\n                <li>Thread: #");

                        Write(test.ThreadId);

WriteLiteral("</li>\r\n");

                
                 if (!string.IsNullOrEmpty(test.Result.Error))
                {

WriteLiteral("                <li>Error: ");

                       Write(test.Result.Error);

WriteLiteral("</li>\r\n");

                }

WriteLiteral("            </ul>\r\n");

            

WriteLiteral("            <table");

WriteLiteral(" class=\"testEvents\"");

WriteLiteral(">\r\n                <tr>\r\n                    <th>Steps</th>\r\n                    " +
"<th>Trace</th>\r\n                    <th>Result</th>\r\n                </tr>\r\n");

                
                 foreach (var traceEvent in test.Result.TraceEvents)
                {
	                if (!IsRelevant(traceEvent))
	                {
		                continue;
	                }
	                var relatedNode = GetTestNode(traceEvent);

WriteLiteral("                    <tr>\r\n                        <td>\r\n                         " +
"   <pre");

WriteLiteral(" class=\"log\"");

WriteLiteral(">");

                                         Write(GetBusinessMessages(traceEvent));

WriteLiteral("</pre>\r\n                        </td>\r\n                        <td>\r\n            " +
"                <!-- [");

                             Write(traceEvent.Type);

WriteLiteral(": ");

                                               Write(relatedNode.Type);

WriteLiteral(" - ");

                                                                   Write(relatedNode.Title);

WriteLiteral("] -->\r\n                            <pre");

WriteLiteral(" class=\"log\"");

WriteLiteral(">");

                                        Write(Raw(FormatTechMessages(traceEvent.TechMessages.TrimEnd())));

WriteLiteral("</pre>\r\n");

                            
                             if (!string.IsNullOrEmpty(traceEvent.Error))
                            {

WriteLiteral("                                <div");

WriteLiteral(" class=\"errorMessage\"");

WriteLiteral(">");

                                                     Write(Raw(FormatTechMessages(traceEvent.Error)));

WriteLiteral("</div>\r\n");

WriteLiteral("                                <pre");

WriteLiteral(" class=\"stackTrace\"");

WriteLiteral(">");

                                                   Write(Raw(FormatTechMessages(traceEvent.StackTrace.TrimEnd())));

WriteLiteral("</pre>\r\n");

                            }

WriteLiteral("                        </td>\r\n                        <td>");

                       Write(traceEvent.ResultType);

WriteLiteral(" in ");

                                                 Write(GetSeconds(Math.Round(traceEvent.Duration.TotalSeconds, 3)));

WriteLiteral("s</td>\r\n                    </tr>\r\n");

                }

WriteLiteral("            </table>\r\n");

        }

WriteLiteral("\t</body>\r\n</html>");

        }
    }
}

------------- END -----------


List of loaded Assemblies:
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\SpecFlow.Plus.Runner.Reporting.exe
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\BoDi.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\CommandLine.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\SpecFlow.Plus.Shared.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\TechTalk.SpecRun.Framework.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\FSharp.Core.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\TechTalk.SpecRun.Framework.Interfaces.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\TechTalk.SpecRun.Framework.Utils.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\Newtonsoft.Json.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Numerics\v4.0_4.0.0.0__b77a5c561934e089\System.Numerics.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_64\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\RazorEngine.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll
	Loaded Assembly: C:\NewTest\BookingTest\bin\Debug\SpecFlowPlusRunner\net45\System.Web.Razor.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.resources\v4.0_4.0.0.0_pt-BR_b77a5c561934e089\System.resources.dll
	Loaded Assembly: C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll
   em RazorEngine.Compilation.DirectCompilerServiceBase.CompileTypeImpl(TypeContext context)
   em RazorEngine.Compilation.DirectCompilerServiceBase.CompileType_Windows(TypeContext context)
   em RazorEngine.Compilation.DirectCompilerServiceBase.CompileType(TypeContext context)
   em RazorEngine.Templating.RazorEngineCore.CreateTemplateType(ITemplateSource razorTemplate, Type modelType)
   em RazorEngine.Templating.RazorEngineCore.Compile(ITemplateKey key, Type modelType)
   em RazorEngine.Templating.RazorEngineService.CompileAndCacheInternal(ITemplateKey key, Type modelType)
   em RazorEngine.Templating.RazorEngineService.GetCompiledTemplate(ITemplateKey key, Type modelType, Boolean compileOnCacheMiss)
   em RazorEngine.Templating.RazorEngineService.RunCompile(ITemplateKey key, TextWriter writer, Type modelType, Object model, DynamicViewBag viewBag)
   em RazorEngine.Templating.RazorEngineServiceExtensions.<>c__DisplayClass15_0.<RunCompile>b__0(TextWriter writer)
   em RazorEngine.Templating.RazorEngineServiceExtensions.WithWriter(Action`1 withWriter)
   em SpecFlow.Plus.Runner.Reporting.Rendering.RazorReportRenderer.RenderReport(TestRunResult testRunResult, ReportConfigurationEntry reportConfigurationEntry)
2020-02-19T17:43:54.4379097-03:00;Thread#1;Error;Failed generating one or more reports.
========== End of log file ==========
